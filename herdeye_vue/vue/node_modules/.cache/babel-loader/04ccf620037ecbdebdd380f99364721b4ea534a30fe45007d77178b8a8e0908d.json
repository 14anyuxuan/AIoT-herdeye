{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport * as echarts from 'echarts';\nimport markerIcon from '@/assets/imgs/icons8-圈向上-64.png';\n// 引入SSE服务（替换为实际文件路径）\nimport sseService from './sseService';\nexport default {\n  name: 'FarmMonitor',\n  data() {\n    return {\n      // 核心数据\n      weather: {\n        date: `${new Date().getMonth() + 1}月${new Date().getDate()}日`,\n        weekday: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'][new Date().getDay()],\n        weather: '晴',\n        tempMin: 18,\n        tempMax: 30,\n        windDir: '东风',\n        windForce: '3级'\n      },\n      currDate: new Date().toLocaleDateString(),\n      temp: 22,\n      hum: 50,\n      // 数据有效性标记\n      tempValid: false,\n      humValid: false,\n      weightValid: false,\n      tempHistory: [{\n        time: '00:00',\n        value: 22\n      }, {\n        time: '00:05',\n        value: 22.5\n      }],\n      humHistory: [{\n        time: '00:00',\n        value: 50\n      }, {\n        time: '00:05',\n        value: 49.5\n      }],\n      tempRange: {\n        min: 18,\n        max: 26\n      },\n      humRange: {\n        min: 40,\n        max: 60\n      },\n      // 设备数据\n      water: {\n        status: 0,\n        value: 0\n      },\n      weight: 50,\n      devices: [{\n        name: '水泵',\n        status: 0,\n        key: 'pump'\n      }, {\n        name: '电机',\n        status: 0,\n        key: 'motor'\n      }, {\n        name: '灯光',\n        status: 0,\n        key: 'light'\n      }, {\n        name: '阀门',\n        status: 0,\n        key: 'door'\n      }, {\n        name: '加热',\n        status: 0,\n        key: 'heat'\n      }, {\n        name: '风机',\n        status: 0,\n        key: 'fan'\n      }],\n      // 连接状态\n      mainConn: false,\n      mapConn: false,\n      lastUpdate: '-',\n      maxHistory: 10,\n      connError: '',\n      // 连接错误信息\n\n      // 进度条相关配置\n      barHeight: 120,\n      colors: ['#43a047', '#8bc34a', '#cddc39'],\n      // 地图相关\n      lnglat: '',\n      course: '',\n      mapStatus: '地图加载中...',\n      map: null,\n      marker: null,\n      amapKey: '你的高德地图Key',\n      // 替换为实际Key\n\n      // 图表实例\n      tempChart: null,\n      humChart: null,\n      // SSE事件解绑函数\n      offMainData: null,\n      offMapData: null,\n      offConnStatus: null\n    };\n  },\n  computed: {\n    weightPercent() {\n      return Math.max(0, Math.min(100, Math.round(this.weight)));\n    },\n    tempWarn() {\n      return this.tempValid && (this.temp < this.tempRange.min || this.temp > this.tempRange.max);\n    },\n    humWarn() {\n      return this.humValid && (this.hum < this.humRange.min || this.hum > this.humRange.max);\n    },\n    waterAlarm() {\n      return this.water.value > 8.5 || this.water.value < 2.0;\n    },\n    gradientBg() {\n      return `linear-gradient(to top, ${this.colors.join(', ')})`;\n    }\n  },\n  methods: {\n    // 图表初始化与渲染\n    initCharts() {\n      const tempDom = document.getElementById('tempChart');\n      const humDom = document.getElementById('humChart');\n      if (!tempDom || !humDom) {\n        console.error('图表DOM元素不存在，重试初始化...');\n        setTimeout(() => this.initCharts(), 1000);\n        return;\n      }\n      this.tempChart = echarts.init(tempDom);\n      this.humChart = echarts.init(humDom);\n      window.addEventListener('resize', () => {\n        this.tempChart?.resize();\n        this.humChart?.resize();\n      });\n      this.renderCharts();\n    },\n    renderCharts() {\n      if (!this.tempChart || !this.humChart) return;\n\n      // 温度图表配置\n      this.tempChart.setOption({\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: {\n          type: 'category',\n          data: this.tempHistory.map(i => i.time),\n          axisLabel: {\n            rotate: 30\n          }\n        },\n        yAxis: {\n          type: 'value',\n          name: '温度(°C)',\n          min: Math.min(...this.tempHistory.map(i => i.value), this.tempRange.min) - 2,\n          max: Math.max(...this.tempHistory.map(i => i.value), this.tempRange.max) + 2,\n          markLine: {\n            data: [{\n              yAxis: this.tempRange.min,\n              name: '最低阈值',\n              lineStyle: {\n                color: 'red'\n              }\n            }, {\n              yAxis: this.tempRange.max,\n              name: '最高阈值',\n              lineStyle: {\n                color: 'red'\n              }\n            }]\n          }\n        },\n        series: [{\n          name: '温度',\n          type: 'line',\n          data: this.tempHistory.map(i => i.value),\n          smooth: true,\n          lineStyle: {\n            color: '#e74c3c'\n          },\n          itemStyle: {\n            color: '#e74c3c'\n          },\n          areaStyle: {\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: 'rgba(231,76,60,0.3)'\n            }, {\n              offset: 1,\n              color: 'rgba(231,76,60,0)'\n            }])\n          }\n        }]\n      });\n\n      // 湿度图表配置\n      this.humChart.setOption({\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: {\n          type: 'category',\n          data: this.humHistory.map(i => i.time),\n          axisLabel: {\n            rotate: 30\n          }\n        },\n        yAxis: {\n          type: 'value',\n          name: '湿度(%)',\n          min: Math.min(...this.humHistory.map(i => i.value), this.humRange.min) - 5,\n          max: Math.max(...this.humHistory.map(i => i.value), this.humRange.max) + 5,\n          markLine: {\n            data: [{\n              yAxis: this.humRange.min,\n              name: '最低阈值',\n              lineStyle: {\n                color: 'blue'\n              }\n            }, {\n              yAxis: this.humRange.max,\n              name: '最高阈值',\n              lineStyle: {\n                color: 'blue'\n              }\n            }]\n          }\n        },\n        series: [{\n          name: '湿度',\n          type: 'line',\n          data: this.humHistory.map(i => i.value),\n          smooth: true,\n          lineStyle: {\n            color: '#3498db'\n          },\n          itemStyle: {\n            color: '#3498db'\n          },\n          areaStyle: {\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: 'rgba(52,152,219,0.3)'\n            }, {\n              offset: 1,\n              color: 'rgba(52,152,219,0)'\n            }])\n          }\n        }]\n      });\n    },\n    // 历史数据更新\n    updateHistory(ref, val, time) {\n      if (typeof val !== 'number' || isNaN(val)) {\n        console.warn('无效的历史数据，跳过更新');\n        return;\n      }\n      ref.push({\n        time,\n        value: val\n      });\n      if (ref.length > this.maxHistory) ref.shift();\n    },\n    // 地图初始化\n    initMap() {\n      if (!this.amapKey || this.amapKey === '你的高德地图Key') {\n        this.mapStatus = '请配置有效的高德地图Key';\n        console.error('未配置高德地图Key，地图无法加载');\n        return;\n      }\n      const loadMap = () => new Promise((res, rej) => {\n        if (window.AMap) return res(window.AMap);\n        const script = document.createElement('script');\n        script.src = `https://webapi.amap.com/maps?v=1.4.15&key=${this.amapKey}`;\n        script.onload = () => {\n          if (window.AMap) res(window.AMap);else rej(new Error('地图加载失败：未找到AMap对象'));\n        };\n        script.onerror = () => rej(new Error('地图脚本加载失败（可能是Key无效或网络问题）'));\n        document.head.appendChild(script);\n      });\n      loadMap().then(AMap => {\n        this.map = new AMap.Map('map', {\n          resizeEnable: true,\n          zoom: 16,\n          center: [116.397470, 39.908823],\n          viewMode: '2D'\n        });\n\n        // 检查标记图标加载\n        const checkMarkerIcon = () => new Promise((res, rej) => {\n          const img = new Image();\n          img.src = markerIcon;\n          img.onload = () => res();\n          img.onerror = () => rej(new Error('标记图标加载失败，请检查路径'));\n        });\n        checkMarkerIcon().then(() => {\n          this.marker = new AMap.Marker({\n            position: [116.397470, 39.908823],\n            icon: new AMap.Icon({\n              size: new AMap.Size(32, 32),\n              image: markerIcon,\n              imageSize: new AMap.Size(64, 64),\n              imageOffset: new AMap.Pixel(-16, -16)\n            }),\n            anchor: 'center'\n          });\n          this.map.add(this.marker);\n        }).catch(err => {\n          console.error(err);\n          this.mapStatus += '（标记图标加载失败）';\n        });\n        this.map.on('complete', () => this.mapStatus = '地图已就绪');\n        this.map.on('error', err => this.mapStatus = `地图错误：${err.message}`);\n      }).catch(err => {\n        this.mapStatus = `地图加载失败：${err.message}`;\n        console.error(err);\n      });\n    },\n    // 数据刷新\n    refresh() {\n      this.lastUpdate = '刷新中...';\n      sseService.closeConnections();\n      sseService.initConnections();\n    },\n    // 处理主数据更新\n    handleMainData(data) {\n      try {\n        // 温度数据校验\n        const newTemp = parseFloat(data.T || data.tem);\n        if (!isNaN(newTemp)) {\n          this.temp = newTemp;\n          this.tempValid = true;\n        } else {\n          this.tempValid = false;\n          console.warn('无效的温度数据:', data.T || data.tem);\n        }\n\n        // 湿度数据校验\n        const newHum = parseFloat(data.H || data.hum);\n        if (!isNaN(newHum)) {\n          this.hum = newHum;\n          this.humValid = true;\n        } else {\n          this.humValid = false;\n          console.warn('无效的湿度数据:', data.H || data.hum);\n        }\n\n        // 水位数据处理\n        this.water = {\n          status: typeof data.waterStatus === 'number' ? data.waterStatus : 0,\n          value: typeof data.water_level === 'number' ? data.water_level : 0\n        };\n\n        // 饲料重量校验\n        const newWeight = parseFloat(data.weight);\n        if (!isNaN(newWeight)) {\n          this.weight = newWeight;\n          this.weightValid = true;\n        } else {\n          this.weightValid = false;\n          console.warn('无效的饲料重量数据:', data.weight);\n        }\n\n        // 设备状态更新（通过key快速定位）\n        this.devices.forEach(device => {\n          if (typeof data[device.key] === 'number') {\n            device.status = data[device.key];\n          }\n        });\n\n        // 更新历史数据\n        const timeStr = new Date().toLocaleTimeString();\n        if (this.tempValid) this.updateHistory(this.tempHistory, this.temp, timeStr);\n        if (this.humValid) this.updateHistory(this.humHistory, this.hum, timeStr);\n\n        // 更新状态信息\n        this.lastUpdate = new Date().toLocaleString();\n        this.currDate = new Date().toLocaleDateString();\n        this.renderCharts();\n        this.mainConn = true;\n        this.connError = '';\n      } catch (e) {\n        this.mainConn = false;\n        this.connError = `数据处理失败: ${e.message}`;\n        console.error('处理主数据失败:', e);\n      }\n    },\n    // 处理地图数据更新\n    handleMapData(data) {\n      try {\n        // 经纬度处理\n        if (data.lng !== undefined && data.lat !== undefined) {\n          const lng = parseFloat(data.lng),\n            lat = parseFloat(data.lat);\n          if (!isNaN(lng) && !isNaN(lat) && lng >= -180 && lng <= 180 && lat >= -90 && lat <= 90) {\n            this.lnglat = `${lng.toFixed(6)},${lat.toFixed(6)}`;\n            if (this.marker && this.map) {\n              this.marker.setPosition([lng + 0.01, lat - 0.001]);\n              this.map.panTo([lng + 0.01, lat - 0.001], {\n                duration: 300\n              });\n            }\n          } else {\n            console.warn('经纬度超出有效范围:', lng, lat);\n          }\n        }\n\n        // 航向角处理\n        if (data.cogt !== undefined) {\n          const angle = parseFloat(data.cogt);\n          if (!isNaN(angle)) {\n            this.course = `${angle.toFixed(1)}°`;\n            if (this.marker) {\n              this.marker.setRotation((angle % 360 + 360) % 360);\n            }\n          }\n        }\n        this.mapConn = true;\n      } catch (e) {\n        this.mapConn = false;\n        console.error('处理地图数据失败:', e);\n      }\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.initCharts();\n      this.initMap();\n\n      // 初始化SSE连接\n      sseService.initConnections();\n\n      // 订阅主数据\n      this.offMainData = sseService.onMainData(data => {\n        this.handleMainData(data);\n      });\n\n      // 订阅地图数据\n      this.offMapData = sseService.onMapData(data => {\n        this.handleMapData(data);\n      });\n\n      // 订阅连接状态\n      this.offConnStatus = sseService.onConnectionStatus(status => {\n        this.mainConn = status;\n        this.mapConn = status;\n        if (!status) this.connError = '连接已断开，正在重试...';\n      });\n    });\n  },\n  beforeDestroy() {\n    // 清理SSE资源\n    sseService.closeConnections();\n    if (this.offMainData) this.offMainData();\n    if (this.offMapData) this.offMapData();\n    if (this.offConnStatus) this.offConnStatus();\n\n    // 清理图表和地图\n    if (this.tempChart) this.tempChart.dispose();\n    if (this.humChart) this.humChart.dispose();\n    if (this.map) this.map.destroy();\n  }\n};","map":{"version":3,"names":["echarts","markerIcon","sseService","name","data","weather","date","Date","getMonth","getDate","weekday","getDay","tempMin","tempMax","windDir","windForce","currDate","toLocaleDateString","temp","hum","tempValid","humValid","weightValid","tempHistory","time","value","humHistory","tempRange","min","max","humRange","water","status","weight","devices","key","mainConn","mapConn","lastUpdate","maxHistory","connError","barHeight","colors","lnglat","course","mapStatus","map","marker","amapKey","tempChart","humChart","offMainData","offMapData","offConnStatus","computed","weightPercent","Math","round","tempWarn","humWarn","waterAlarm","gradientBg","join","methods","initCharts","tempDom","document","getElementById","humDom","console","error","setTimeout","init","window","addEventListener","resize","renderCharts","setOption","tooltip","trigger","grid","left","right","bottom","containLabel","xAxis","type","i","axisLabel","rotate","yAxis","markLine","lineStyle","color","series","smooth","itemStyle","areaStyle","graphic","LinearGradient","offset","updateHistory","ref","val","isNaN","warn","push","length","shift","initMap","loadMap","Promise","res","rej","AMap","script","createElement","src","onload","Error","onerror","head","appendChild","then","Map","resizeEnable","zoom","center","viewMode","checkMarkerIcon","img","Image","Marker","position","icon","Icon","size","Size","image","imageSize","imageOffset","Pixel","anchor","add","catch","err","on","message","refresh","closeConnections","initConnections","handleMainData","newTemp","parseFloat","T","tem","newHum","H","waterStatus","water_level","newWeight","forEach","device","timeStr","toLocaleTimeString","toLocaleString","e","handleMapData","lng","undefined","lat","toFixed","setPosition","panTo","duration","cogt","angle","setRotation","mounted","$nextTick","onMainData","onMapData","onConnectionStatus","beforeDestroy","dispose","destroy"],"sources":["src/views/manager/details.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard\">\r\n    <!-- 顶部信息栏 -->\r\n    <header class=\"top-bar\">\r\n      <div class=\"title-section\">\r\n        <h1>养殖场环境监控系统</h1>\r\n        <div class=\"weather-info\">\r\n          <span>{{ weather.date }} {{ weather.weekday }}</span>\r\n          <span>{{ weather.weather }}</span>\r\n          <span>{{ weather.tempMin }}°~{{ weather.tempMax }}°</span>\r\n          <span>{{ weather.windDir }} {{ weather.windForce }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"status-info\">\r\n        <div class=\"conn-status\">\r\n          <span class=\"dot\" :class=\"{ green: mainConn }\"></span>\r\n          <span>{{ mainConn ? '连接正常' : '连接断开' }}</span>\r\n          <span class=\"error-tip\" v-if=\"connError\">{{ connError }}</span>\r\n        </div>\r\n        <span>{{ currDate }}</span>\r\n      </div>\r\n    </header>\r\n\r\n    <!-- 核心内容区 -->\r\n    <main class=\"main-content\">\r\n      <!-- 环境状态指标 -->\r\n      <section class=\"status-cards\">\r\n        <h2>环境跟踪</h2>\r\n        <div class=\"cards\">\r\n          <div class=\"card\" :class=\"{ warn: tempWarn }\">\r\n            <div>当前温度</div>\r\n            <div class=\"val\">{{ tempValid ? temp.toFixed(1) + '°C' : '无数据' }}</div>\r\n          </div>\r\n          <div class=\"card\" :class=\"{ warn: humWarn }\">\r\n            <div>当前湿度</div>\r\n            <div class=\"val\">{{ humValid ? hum.toFixed(1) + '%' : '无数据' }}</div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <!-- 趋势图表 -->\r\n      <section class=\"charts\">\r\n        <h2>环境趋势</h2>\r\n        <div class=\"charts-grid\">\r\n          <div class=\"chart-box\">\r\n            <div>温度历史数据</div>\r\n            <div id=\"tempChart\" class=\"chart\"></div>\r\n          </div>\r\n          <div class=\"chart-box\">\r\n            <div>湿度历史数据</div>\r\n            <div id=\"humChart\" class=\"chart\"></div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <!-- 设备与状态 -->\r\n      <section class=\"device-info\">\r\n        <h2>设备与状态信息</h2>\r\n        <div class=\"info-grid\">\r\n          <div class=\"device-grid\">\r\n            <!-- 水位状态 -->\r\n            <div class=\"card\" :class=\"{ warn: waterAlarm }\">\r\n              <div>水位状态</div>\r\n              <span class=\"status\" :class=\"{ on: water.status === 1 }\">\r\n                {{ water.status === 1 ? '正常' : '有误' }}\r\n              </span>\r\n            </div>\r\n            \r\n            <!-- 饲料重量 -->\r\n            <div class=\"card feed-card\">\r\n              <div>饲料重量状态值</div>\r\n              <div class=\"progress-container\">\r\n                <div class=\"progress-bar\" :style=\"{ height: barHeight + 'px' }\">\r\n                  <div \r\n                    class=\"progress-fill\" \r\n                    :class=\"{ low: weightPercent < 20 }\"\r\n                    :style=\"{ \r\n                      height: weightPercent + '%',\r\n                      background: gradientBg \r\n                    }\"\r\n                  ></div>\r\n                  <div \r\n                    class=\"progress-marker\"\r\n                    :style=\"{ bottom: weightPercent + '%' }\"\r\n                  ></div>\r\n                </div>\r\n                <div class=\"weight-info\">\r\n                  <span>{{ weightValid ? weight.toFixed(1) + 'g' : '无数据' }}</span>\r\n                  <span>{{ weightPercent }}%</span>\r\n                  <span v-if=\"weightPercent < 20\" class=\"low-warning\">\r\n                    饲料不足，请补充!\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <!-- 水泵设备 -->\r\n            <div class=\"card device-card\">\r\n              <div class=\"icon\">💧</div>\r\n              <div>水泵状态</div>\r\n              <span class=\"status\" :class=\"{ on: devices[0].status === 1 }\">\r\n                {{ devices[0].status === 1 ? '运行中' : '已关闭' }}\r\n              </span>\r\n            </div>\r\n            \r\n            <!-- 电机设备 -->\r\n            <div class=\"card device-card\">\r\n              <div class=\"icon\">🔊</div>\r\n              <div>电机状态</div>\r\n              <span class=\"status\" :class=\"{ on: devices[1].status === 1 }\">\r\n                {{ devices[1].status === 1 ? '运行中' : '已关闭' }}\r\n              </span>\r\n            </div>\r\n            \r\n            <!-- 灯光设备 -->\r\n            <div class=\"card device-card\">\r\n              <div class=\"icon\">💡</div>\r\n              <div>灯光状态</div>\r\n              <span class=\"status\" :class=\"{ on: devices[2].status === 1 }\">\r\n                {{ devices[2].status === 1 ? '运行中' : '已关闭' }}\r\n              </span>\r\n            </div>\r\n            \r\n            <!-- 阀门设备 -->\r\n            <div class=\"card device-card\">\r\n              <div class=\"icon\">🚪</div>\r\n              <div>阀门状态</div>\r\n              <span class=\"status\" :class=\"{ on: devices[3].status === 1 }\">\r\n                {{ devices[3].status === 1 ? '运行中' : '已关闭' }}\r\n              </span>\r\n            </div>\r\n            \r\n            <!-- 加热设备 -->\r\n            <div class=\"card device-card\">\r\n              <div class=\"icon\">🔥</div>\r\n              <div>加热状态</div>\r\n              <span class=\"status\" :class=\"{ on: devices[4].status === 1 }\">\r\n                {{ devices[4].status === 1 ? '运行中' : '已关闭' }}\r\n              </span>\r\n            </div>\r\n            \r\n            <!-- 风机设备 -->\r\n            <div class=\"card device-card\">\r\n              <div class=\"icon\">💨</div>\r\n              <div>风机状态</div>\r\n              <span class=\"status\" :class=\"{ on: devices[5].status === 1 }\">\r\n                {{ devices[5].status === 1 ? '运行中' : '已关闭' }}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <!-- 地图区域 -->\r\n      <section class=\"map-section\">\r\n        <h2>位置监控</h2>\r\n        <div class=\"map-container\">\r\n          <div id=\"map\" class=\"map-view\"></div>\r\n          <div class=\"map-status\">\r\n            <span>地图后端连接: </span>\r\n            <span :class=\"{ online: mapConn }\">{{ mapConn ? '已连接' : '已断开' }}</span>\r\n            <span class=\"map-dot\" :class=\"{ green: mapConn }\"></span>\r\n          </div>\r\n          <div class=\"map-data\">\r\n            <div><span>经纬度:</span> <span>{{ lnglat || '等待数据...' }}</span></div>\r\n            <div><span>航向角:</span> <span>{{ course || '0°' }}</span></div>\r\n            <div><span>地图状态:</span> <span>{{ mapStatus }}</span></div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </main>\r\n\r\n    <footer class=\"footer\">\r\n      <div>最后更新时间: {{ lastUpdate || '未更新' }}</div>\r\n      <button class=\"refresh\" @click=\"refresh\">\r\n        <i class=\"fa fa-refresh\"></i> 刷新数据\r\n      </button>\r\n    </footer>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts'\r\nimport markerIcon from '@/assets/imgs/icons8-圈向上-64.png'\r\n// 引入SSE服务（替换为实际文件路径）\r\nimport sseService from './sseService'\r\n\r\nexport default {\r\n  name: 'FarmMonitor',\r\n  data() {\r\n    return {\r\n      // 核心数据\r\n      weather: {\r\n        date: `${new Date().getMonth() + 1}月${new Date().getDate()}日`,\r\n        weekday: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'][new Date().getDay()],\r\n        weather: '晴',\r\n        tempMin: 18,\r\n        tempMax: 30,\r\n        windDir: '东风',\r\n        windForce: '3级'\r\n      },\r\n      currDate: new Date().toLocaleDateString(),\r\n      temp: 22,\r\n      hum: 50,\r\n      // 数据有效性标记\r\n      tempValid: false,\r\n      humValid: false,\r\n      weightValid: false,\r\n      tempHistory: [{ time: '00:00', value: 22 }, { time: '00:05', value: 22.5 }],\r\n      humHistory: [{ time: '00:00', value: 50 }, { time: '00:05', value: 49.5 }],\r\n      tempRange: { min: 18, max: 26 },\r\n      humRange: { min: 40, max: 60 },\r\n\r\n      // 设备数据\r\n      water: { status: 0, value: 0 },\r\n      weight: 50,\r\n      devices: [\r\n        { name: '水泵', status: 0, key: 'pump' },\r\n        { name: '电机', status: 0, key: 'motor' },\r\n        { name: '灯光', status: 0, key: 'light' },\r\n        { name: '阀门', status: 0, key: 'door' },\r\n        { name: '加热', status: 0, key: 'heat' },\r\n        { name: '风机', status: 0, key: 'fan' }\r\n      ],\r\n\r\n      // 连接状态\r\n      mainConn: false,\r\n      mapConn: false,\r\n      lastUpdate: '-',\r\n      maxHistory: 10,\r\n      connError: '', // 连接错误信息\r\n\r\n      // 进度条相关配置\r\n      barHeight: 120,\r\n      colors: ['#43a047', '#8bc34a', '#cddc39'],\r\n\r\n      // 地图相关\r\n      lnglat: '',\r\n      course: '',\r\n      mapStatus: '地图加载中...',\r\n      map: null,\r\n      marker: null,\r\n      amapKey: '你的高德地图Key', // 替换为实际Key\r\n\r\n      // 图表实例\r\n      tempChart: null,\r\n      humChart: null,\r\n\r\n      // SSE事件解绑函数\r\n      offMainData: null,\r\n      offMapData: null,\r\n      offConnStatus: null\r\n    }\r\n  },\r\n  computed: {\r\n    weightPercent() {\r\n      return Math.max(0, Math.min(100, Math.round(this.weight)))\r\n    },\r\n    tempWarn() {\r\n      return this.tempValid && (this.temp < this.tempRange.min || this.temp > this.tempRange.max)\r\n    },\r\n    humWarn() {\r\n      return this.humValid && (this.hum < this.humRange.min || this.hum > this.humRange.max)\r\n    },\r\n    waterAlarm() {\r\n      return this.water.value > 8.5 || this.water.value < 2.0\r\n    },\r\n    gradientBg() {\r\n      return `linear-gradient(to top, ${this.colors.join(', ')})`\r\n    }\r\n  },\r\n  methods: {\r\n    // 图表初始化与渲染\r\n    initCharts() {\r\n      const tempDom = document.getElementById('tempChart')\r\n      const humDom = document.getElementById('humChart')\r\n      if (!tempDom || !humDom) {\r\n        console.error('图表DOM元素不存在，重试初始化...')\r\n        setTimeout(() => this.initCharts(), 1000)\r\n        return\r\n      }\r\n\r\n      this.tempChart = echarts.init(tempDom)\r\n      this.humChart = echarts.init(humDom)\r\n      \r\n      window.addEventListener('resize', () => {\r\n        this.tempChart?.resize()\r\n        this.humChart?.resize()\r\n      })\r\n      this.renderCharts()\r\n    },\r\n    renderCharts() {\r\n      if (!this.tempChart || !this.humChart) return\r\n\r\n      // 温度图表配置\r\n      this.tempChart.setOption({\r\n        tooltip: { trigger: 'axis' },\r\n        grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true },\r\n        xAxis: { \r\n          type: 'category', \r\n          data: this.tempHistory.map(i => i.time),\r\n          axisLabel: { rotate: 30 } \r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          name: '温度(°C)',\r\n          min: Math.min(...this.tempHistory.map(i => i.value), this.tempRange.min) - 2,\r\n          max: Math.max(...this.tempHistory.map(i => i.value), this.tempRange.max) + 2,\r\n          markLine: {\r\n            data: [\r\n              { yAxis: this.tempRange.min, name: '最低阈值', lineStyle: { color: 'red' } },\r\n              { yAxis: this.tempRange.max, name: '最高阈值', lineStyle: { color: 'red' } }\r\n            ]\r\n          }\r\n        },\r\n        series: [{\r\n          name: '温度',\r\n          type: 'line',\r\n          data: this.tempHistory.map(i => i.value),\r\n          smooth: true,\r\n          lineStyle: { color: '#e74c3c' },\r\n          itemStyle: { color: '#e74c3c' },\r\n          areaStyle: { color: new echarts.graphic.LinearGradient(0,0,0,1,[\r\n            { offset: 0, color: 'rgba(231,76,60,0.3)' },\r\n            { offset: 1, color: 'rgba(231,76,60,0)' }\r\n          ])}\r\n        }]\r\n      })\r\n\r\n      // 湿度图表配置\r\n      this.humChart.setOption({\r\n        tooltip: { trigger: 'axis' },\r\n        grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true },\r\n        xAxis: { type: 'category', data: this.humHistory.map(i => i.time), axisLabel: { rotate: 30 } },\r\n        yAxis: {\r\n          type: 'value',\r\n          name: '湿度(%)',\r\n          min: Math.min(...this.humHistory.map(i => i.value), this.humRange.min) - 5,\r\n          max: Math.max(...this.humHistory.map(i => i.value), this.humRange.max) + 5,\r\n          markLine: {\r\n            data: [\r\n              { yAxis: this.humRange.min, name: '最低阈值', lineStyle: { color: 'blue' } },\r\n              { yAxis: this.humRange.max, name: '最高阈值', lineStyle: { color: 'blue' } }\r\n            ]\r\n          }\r\n        },\r\n        series: [{\r\n          name: '湿度',\r\n          type: 'line',\r\n          data: this.humHistory.map(i => i.value),\r\n          smooth: true,\r\n          lineStyle: { color: '#3498db' },\r\n          itemStyle: { color: '#3498db' },\r\n          areaStyle: { color: new echarts.graphic.LinearGradient(0,0,0,1,[\r\n            { offset: 0, color: 'rgba(52,152,219,0.3)' },\r\n            { offset: 1, color: 'rgba(52,152,219,0)' }\r\n          ])}\r\n        }]\r\n      })\r\n    },\r\n\r\n    // 历史数据更新\r\n    updateHistory(ref, val, time) {\r\n      if (typeof val !== 'number' || isNaN(val)) {\r\n        console.warn('无效的历史数据，跳过更新')\r\n        return\r\n      }\r\n      ref.push({ time, value: val })\r\n      if (ref.length > this.maxHistory) ref.shift()\r\n    },\r\n\r\n    // 地图初始化\r\n    initMap() {\r\n      if (!this.amapKey || this.amapKey === '你的高德地图Key') {\r\n        this.mapStatus = '请配置有效的高德地图Key'\r\n        console.error('未配置高德地图Key，地图无法加载')\r\n        return\r\n      }\r\n\r\n      const loadMap = () => new Promise((res, rej) => {\r\n        if (window.AMap) return res(window.AMap)\r\n        const script = document.createElement('script')\r\n        script.src = `https://webapi.amap.com/maps?v=1.4.15&key=${this.amapKey}`\r\n        script.onload = () => {\r\n          if (window.AMap) res(window.AMap)\r\n          else rej(new Error('地图加载失败：未找到AMap对象'))\r\n        }\r\n        script.onerror = () => rej(new Error('地图脚本加载失败（可能是Key无效或网络问题）'))\r\n        document.head.appendChild(script)\r\n      })\r\n\r\n      loadMap().then(AMap => {\r\n        this.map = new AMap.Map('map', {\r\n          resizeEnable: true,\r\n          zoom: 16,\r\n          center: [116.397470, 39.908823],\r\n          viewMode: '2D'\r\n        })\r\n        \r\n        // 检查标记图标加载\r\n        const checkMarkerIcon = () => new Promise((res, rej) => {\r\n          const img = new Image()\r\n          img.src = markerIcon\r\n          img.onload = () => res()\r\n          img.onerror = () => rej(new Error('标记图标加载失败，请检查路径'))\r\n        })\r\n\r\n        checkMarkerIcon().then(() => {\r\n          this.marker = new AMap.Marker({\r\n            position: [116.397470, 39.908823],\r\n            icon: new AMap.Icon({\r\n              size: new AMap.Size(32, 32),\r\n              image: markerIcon,\r\n              imageSize: new AMap.Size(64, 64),\r\n              imageOffset: new AMap.Pixel(-16, -16)\r\n            }),\r\n            anchor: 'center'\r\n          })\r\n          this.map.add(this.marker)\r\n        }).catch(err => {\r\n          console.error(err)\r\n          this.mapStatus += '（标记图标加载失败）'\r\n        })\r\n        \r\n        this.map.on('complete', () => this.mapStatus = '地图已就绪')\r\n        this.map.on('error', (err) => this.mapStatus = `地图错误：${err.message}`)\r\n      }).catch(err => {\r\n        this.mapStatus = `地图加载失败：${err.message}`\r\n        console.error(err)\r\n      })\r\n    },\r\n\r\n    // 数据刷新\r\n    refresh() {\r\n      this.lastUpdate = '刷新中...'\r\n      sseService.closeConnections()\r\n      sseService.initConnections()\r\n    },\r\n\r\n    // 处理主数据更新\r\n    handleMainData(data) {\r\n      try {\r\n        // 温度数据校验\r\n        const newTemp = parseFloat(data.T || data.tem)\r\n        if (!isNaN(newTemp)) {\r\n          this.temp = newTemp\r\n          this.tempValid = true\r\n        } else {\r\n          this.tempValid = false\r\n          console.warn('无效的温度数据:', data.T || data.tem)\r\n        }\r\n\r\n        // 湿度数据校验\r\n        const newHum = parseFloat(data.H || data.hum)\r\n        if (!isNaN(newHum)) {\r\n          this.hum = newHum\r\n          this.humValid = true\r\n        } else {\r\n          this.humValid = false\r\n          console.warn('无效的湿度数据:', data.H || data.hum)\r\n        }\r\n\r\n        // 水位数据处理\r\n        this.water = {\r\n          status: typeof data.waterStatus === 'number' ? data.waterStatus : 0,\r\n          value: typeof data.water_level === 'number' ? data.water_level : 0\r\n        }\r\n\r\n        // 饲料重量校验\r\n        const newWeight = parseFloat(data.weight)\r\n        if (!isNaN(newWeight)) {\r\n          this.weight = newWeight\r\n          this.weightValid = true\r\n        } else {\r\n          this.weightValid = false\r\n          console.warn('无效的饲料重量数据:', data.weight)\r\n        }\r\n\r\n        // 设备状态更新（通过key快速定位）\r\n        this.devices.forEach(device => {\r\n          if (typeof data[device.key] === 'number') {\r\n            device.status = data[device.key]\r\n          }\r\n        })\r\n\r\n        // 更新历史数据\r\n        const timeStr = new Date().toLocaleTimeString()\r\n        if (this.tempValid) this.updateHistory(this.tempHistory, this.temp, timeStr)\r\n        if (this.humValid) this.updateHistory(this.humHistory, this.hum, timeStr)\r\n\r\n        // 更新状态信息\r\n        this.lastUpdate = new Date().toLocaleString()\r\n        this.currDate = new Date().toLocaleDateString()\r\n        this.renderCharts()\r\n        this.mainConn = true\r\n        this.connError = ''\r\n      } catch (e) {\r\n        this.mainConn = false\r\n        this.connError = `数据处理失败: ${e.message}`\r\n        console.error('处理主数据失败:', e)\r\n      }\r\n    },\r\n\r\n    // 处理地图数据更新\r\n    handleMapData(data) {\r\n      try {\r\n        // 经纬度处理\r\n        if (data.lng !== undefined && data.lat !== undefined) {\r\n          const lng = parseFloat(data.lng), lat = parseFloat(data.lat)\r\n          if (!isNaN(lng) && !isNaN(lat) && lng >= -180 && lng <= 180 && lat >= -90 && lat <= 90) {\r\n            this.lnglat = `${lng.toFixed(6)},${lat.toFixed(6)}`\r\n            if (this.marker && this.map) {\r\n              this.marker.setPosition([lng + 0.01, lat - 0.001])\r\n              this.map.panTo([lng + 0.01, lat - 0.001], { duration: 300 })\r\n            }\r\n          } else {\r\n            console.warn('经纬度超出有效范围:', lng, lat)\r\n          }\r\n        }\r\n\r\n        // 航向角处理\r\n        if (data.cogt !== undefined) {\r\n          const angle = parseFloat(data.cogt)\r\n          if (!isNaN(angle)) {\r\n            this.course = `${angle.toFixed(1)}°`\r\n            if (this.marker) {\r\n              this.marker.setRotation(((angle % 360) + 360) % 360)\r\n            }\r\n          }\r\n        }\r\n\r\n        this.mapConn = true\r\n      } catch (e) {\r\n        this.mapConn = false\r\n        console.error('处理地图数据失败:', e)\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      this.initCharts()\r\n      this.initMap()\r\n      \r\n      // 初始化SSE连接\r\n      sseService.initConnections()\r\n      \r\n      // 订阅主数据\r\n      this.offMainData = sseService.onMainData(data => {\r\n        this.handleMainData(data)\r\n      })\r\n      \r\n      // 订阅地图数据\r\n      this.offMapData = sseService.onMapData(data => {\r\n        this.handleMapData(data)\r\n      })\r\n      \r\n      // 订阅连接状态\r\n      this.offConnStatus = sseService.onConnectionStatus(status => {\r\n        this.mainConn = status\r\n        this.mapConn = status\r\n        if (!status) this.connError = '连接已断开，正在重试...'\r\n      })\r\n    })\r\n  },\r\n  beforeDestroy() {\r\n    // 清理SSE资源\r\n    sseService.closeConnections()\r\n    if (this.offMainData) this.offMainData()\r\n    if (this.offMapData) this.offMapData()\r\n    if (this.offConnStatus) this.offConnStatus()\r\n\r\n    // 清理图表和地图\r\n    if (this.tempChart) this.tempChart.dispose()\r\n    if (this.humChart) this.humChart.dispose()\r\n    if (this.map) this.map.destroy()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.error-tip {\r\n  color: #e74c3c;\r\n  font-size: 0.8rem;\r\n  margin-left: 10px;\r\n}\r\n.map-status .online { color: #27ae60; }\r\n* { margin: 0; padding: 0; box-sizing: border-box; }\r\n.dashboard { font-family: 'Microsoft YaHei', sans-serif; display: flex; flex-direction: column; background: #f5f7fa; min-height: 100vh; }\r\n\r\n/* 顶部栏 */\r\n.top-bar { display: flex; justify-content: space-between; align-items: center; padding: 1rem 2rem; background: #2c3e50; color: #fff; box-shadow: 0 2px 4px rgba(0,0,0,0.1); flex-wrap: wrap; gap: 1rem; }\r\n.weather-info { display: flex; gap: 1.5rem; font-size: 0.9rem; color: #e0e0e0; }\r\n.conn-status { display: flex; align-items: center; gap: 0.5rem; }\r\n.dot { display: inline-block; width: 10px; height: 10px; border-radius: 50%; background: #e74c3c; }\r\n.dot.green { background: #27ae60; }\r\n.currDate { font-size: 0.9rem; }\r\n\r\n/* 主内容区 */\r\n.main-content { flex: 1; padding: 1.5rem 2rem; display: flex; flex-direction: column; gap: 2rem; overflow-y: auto; }\r\nh2 { font-size: 1.2rem; color: #2c3e50; margin-bottom: 1rem; padding-bottom: 0.5rem; border-bottom: 1px solid #e0e0e0; }\r\n\r\n/* 状态卡片 */\r\n.status-cards .cards { display: grid; grid-template-columns: repeat(2, 1fr); gap: 1rem; height: 140px; }\r\n.card { background: #fff; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); padding: 1rem; display: flex; flex-direction: column; justify-content: center; gap: 0.5rem; }\r\n.card.warn { border-left: 4px solid #e74c3c; }\r\n.card .val { font-size: 1.8rem; font-weight: bold; color: #2c3e50; }\r\n\r\n/* 图表区域 */\r\n.charts .charts-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 1.5rem; height: 400px; }\r\n.chart-box .chart { width: 100%; height: 100%; min-height: 250px; }\r\n\r\n\r\n.device-info .info-grid {\r\n  height: auto;\r\n  padding: 1rem;\r\n  background: #fff;\r\n  border-radius: 6px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n}\r\n\r\n.device-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));\r\n  gap: 1.2rem;\r\n}\r\n\r\n/* 设备卡片通用样式 */\r\n.device-grid .card {\r\n  height: 100%;\r\n  left: 30%;\r\n  min-height: 120px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  padding: 1rem;\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.device-grid .card:hover {\r\n  transform: translateY(-3px);\r\n  box-shadow: 0 4px 8px rgba(0,0,0,0.15);\r\n}\r\n\r\n/* 设备图标样式 */\r\n.device-card .icon {\r\n  font-size: 1.8rem;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n/* 饲料卡片特殊调整 */\r\n.feed-card {\r\n  grid-column: span 2;\r\n  min-height: 160px;\r\n}\r\n\r\n/* 响应式调整 */\r\n@media (max-width: 768px) {\r\n  .device-grid {\r\n    grid-template-columns: 1fr 1fr;\r\n  }\r\n  \r\n  .feed-card {\r\n    grid-column: span 2;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .device-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .feed-card {\r\n    grid-column: span 1;\r\n  }\r\n}\r\n\r\n/* 饲料重量进度条样式 */\r\n.feed-card .progress-container { display: flex; align-items: center; gap: 1rem; justify-content: center; flex: 1; }\r\n.progress-bar {\r\n  width: 60px;\r\n  border: 2px solid #e0e0e0;\r\n  border-radius: 10px;\r\n  position: relative;\r\n  background-color: #f5f5f5;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1) inset;\r\n}\r\n.progress-fill {\r\n  width: 100%;\r\n  position: absolute;\r\n  bottom: 0;\r\n  transition: height 0.8s ease;\r\n  border-radius: 8px;\r\n}\r\n.progress-marker {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 3px;\r\n  background-color: #333;\r\n  transform: translateY(50%);\r\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);\r\n}\r\n.progress-fill.low { \r\n  background: linear-gradient(to top, #e74c3c, #ff5252) !important;\r\n  animation: pulse 1.5s infinite; \r\n}\r\n.weight-info { \r\n  display: flex; \r\n  flex-direction: column; \r\n  gap: 0.5rem; \r\n  align-items: center; \r\n}\r\n.weight-info span {\r\n  font-weight: 500;\r\n}\r\n.low-warning {\r\n  color: #e74c3c;\r\n  font-size: 0.8rem;\r\n  font-weight: bold;\r\n  animation: shake 1s infinite;\r\n}\r\n\r\n/* 设备列表 */\r\n.device-list { display: flex; flex-direction: column; gap: 0.8rem; }\r\n.device-item { padding: 0.6rem 0.8rem; border-radius: 4px; background: #fafafa; font-size: 0.9rem; display: flex; align-items: center; gap: 0.8rem; }\r\n.icon { font-size: 1.1rem; }\r\n.status { font-weight: 500; }\r\n.status.on { color: #27ae60; }\r\n\r\n/* 地图区域 */\r\n.map-container { width: 100%; height: 600px; position: relative; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); overflow: hidden; }\r\n.map-view { width: 100%; height: 100%; }\r\n.map-status { position: absolute; top: 15px; right: 15px; background: rgba(255,255,255,0.9); padding: 0.5rem 1rem; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); font-size: 0.85rem; }\r\n.map-dot { display: inline-block; width: 8px; height: 8px; border-radius: 50%; background: #e74c3c; margin-left: 5px; }\r\n.map-dot.green { background: #27ae60; }\r\n.map-data { position: absolute; bottom: 15px; left: 15px; background: rgba(255,255,255,0.9); padding: 0.8rem; border-radius: 6px; box-shadow: 0 2px 8px rgba(0,0,0,0.15); font-size: 0.9rem; display: flex; gap: 1.5rem; }\r\n.map-data > div { display: flex; gap: 0.5rem; }\r\n\r\n/* 底部区域 */\r\n.footer { height: 50px; display: flex; justify-content: space-between; align-items: center; padding: 0 2rem; background: #2c3e50; color: #fff; font-size: 0.9rem; }\r\n.refresh { background: #3498db; color: #fff; border: none; border-radius: 4px; padding: 0.4rem 0.8rem; display: flex; align-items: center; gap: 0.5rem; cursor: pointer; }\r\n.refresh:hover { background: #2980b9; }\r\n\r\n/* 响应式 */\r\n@media (max-width: 768px) {\r\n  .charts-grid { grid-template-columns: 1fr; height: auto; gap: 1rem; }\r\n  .chart-box { height: 400px; }\r\n  .info-grid { flex-direction: column; height: auto; gap: 1rem; }\r\n  .status-group, .device-list { height: auto; min-height: 300px; }\r\n  .map-container { height: 400px; }\r\n}\r\n\r\n/* 动画效果 */\r\n@keyframes pulse { \r\n  0% { opacity: 1; } \r\n  50% { opacity: 0.6; } \r\n  100% { opacity: 1; } \r\n}\r\n\r\n@keyframes shake {\r\n  0%, 100% { transform: translateX(0); }\r\n  25% { transform: translateX(-3px); }\r\n  75% { transform: translateX(3px); }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}