{"ast":null,"code":"export default {\n  name: 'Home',\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      notices: [],\n      // 新增WebSocket和Worker相关状态\n      worker: null,\n      workerPort: null,\n      connectionStatus: false\n    };\n  },\n  created() {\n    this.$request.get('/notice/selectAll').then(res => {\n      this.notices = res.data || [];\n    });\n  },\n  mounted() {\n    this.initWorker();\n  },\n  methods: {\n    // 新增: 初始化SharedWorker\n    initWorker() {\n      if (!window.SharedWorker) {\n        console.error('当前浏览器不支持SharedWorker');\n        return;\n      }\n      try {\n        this.worker = new SharedWorker('/websocket-shared-worker.js');\n        this.workerPort = this.worker.port;\n\n        // 监听Worker消息\n        this.workerPort.onmessage = event => {\n          this.handleWorkerMessage(event.data);\n        };\n\n        // 监听错误\n        this.workerPort.onerror = error => {\n          console.error('Worker error:', error);\n          this.connectionStatus = false;\n        };\n\n        // 启动连接\n        this.workerPort.start();\n      } catch (error) {\n        console.error('初始化SharedWorker失败:', error);\n      }\n    },\n    // 新增: 处理Worker消息\n    handleWorkerMessage(message) {\n      switch (message.type) {\n        case 'CONNECTED':\n          this.connectionStatus = true;\n          console.log('WebSocket连接已建立');\n          break;\n        case 'DISCONNECTED':\n          this.connectionStatus = false;\n          console.log('WebSocket连接已断开');\n          break;\n        case 'ERROR':\n          console.error('WebSocket错误:', message.data);\n          this.connectionStatus = false;\n          break;\n        // 可以根据需要添加其他消息类型的处理\n        default:\n          console.log('未知消息类型:', message.type);\n      }\n    }\n  },\n  beforeDestroy() {\n    // 清理Worker连接\n    if (this.workerPort) {\n      this.workerPort.close();\n      this.worker = null;\n      this.workerPort = null;\n    }\n  }\n};","map":{"version":3,"names":["name","data","user","JSON","parse","localStorage","getItem","notices","worker","workerPort","connectionStatus","created","$request","get","then","res","mounted","initWorker","methods","window","SharedWorker","console","error","port","onmessage","event","handleWorkerMessage","onerror","start","message","type","log","beforeDestroy","close"],"sources":["src/views/manager/Home.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"card\" style=\"padding: 15px\">\n      您好，{{ user?.name }}！欢迎使用本系统\n    </div>\n\n    <div style=\"display: flex; margin: 10px 0\">\n      <div style=\"width: 50%;\" class=\"card\">\n        <div style=\"margin-bottom: 30px; font-size: 20px; font-weight: bold\">公告列表</div>\n        <div >\n          <el-timeline  reverse slot=\"reference\">\n            <el-timeline-item v-for=\"item in notices\" :key=\"item.id\" :timestamp=\"item.time\">\n              <el-popover\n                  placement=\"right\"\n                  width=\"200\"\n                  trigger=\"hover\"\n                  :content=\"item.content\">\n                <span slot=\"reference\">{{ item.title }}</span>\n              </el-popover>\n            </el-timeline-item>\n          </el-timeline>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n\nexport default {\n  name: 'Home',\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      notices: [],\n      // 新增WebSocket和Worker相关状态\n      worker: null,\n      workerPort: null,\n      connectionStatus: false\n    }\n  },\n  created() {\n    this.$request.get('/notice/selectAll').then(res => {\n      this.notices = res.data || []\n    })\n  },\n  mounted() {\n    this.initWorker();\n  },\n  methods: {\n    // 新增: 初始化SharedWorker\n    initWorker() {\n      if (!window.SharedWorker) {\n        console.error('当前浏览器不支持SharedWorker');\n        return;\n      }\n\n      try {\n        this.worker = new SharedWorker('/websocket-shared-worker.js');\n        this.workerPort = this.worker.port;\n\n        // 监听Worker消息\n        this.workerPort.onmessage = (event) => {\n          this.handleWorkerMessage(event.data);\n        };\n\n        // 监听错误\n        this.workerPort.onerror = (error) => {\n          console.error('Worker error:', error);\n          this.connectionStatus = false;\n        };\n\n        // 启动连接\n        this.workerPort.start();\n      } catch (error) {\n        console.error('初始化SharedWorker失败:', error);\n      }\n    },\n\n    // 新增: 处理Worker消息\n    handleWorkerMessage(message) {\n      switch (message.type) {\n        case 'CONNECTED':\n          this.connectionStatus = true;\n          console.log('WebSocket连接已建立');\n          break;\n        case 'DISCONNECTED':\n          this.connectionStatus = false;\n          console.log('WebSocket连接已断开');\n          break;\n        case 'ERROR':\n          console.error('WebSocket错误:', message.data);\n          this.connectionStatus = false;\n          break;\n        // 可以根据需要添加其他消息类型的处理\n        default:\n          console.log('未知消息类型:', message.type);\n      }\n    }\n  },\n  beforeDestroy() {\n    // 清理Worker连接\n    if (this.workerPort) {\n      this.workerPort.close();\n      this.worker = null;\n      this.workerPort = null;\n    }\n  }\n}\n</script>"],"mappings":"AA6BA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,OAAA;MACA;MACAC,MAAA;MACAC,UAAA;MACAC,gBAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,QAAA,CAAAC,GAAA,sBAAAC,IAAA,CAAAC,GAAA;MACA,KAAAR,OAAA,GAAAQ,GAAA,CAAAd,IAAA;IACA;EACA;EACAe,QAAA;IACA,KAAAC,UAAA;EACA;EACAC,OAAA;IACA;IACAD,WAAA;MACA,KAAAE,MAAA,CAAAC,YAAA;QACAC,OAAA,CAAAC,KAAA;QACA;MACA;MAEA;QACA,KAAAd,MAAA,OAAAY,YAAA;QACA,KAAAX,UAAA,QAAAD,MAAA,CAAAe,IAAA;;QAEA;QACA,KAAAd,UAAA,CAAAe,SAAA,GAAAC,KAAA;UACA,KAAAC,mBAAA,CAAAD,KAAA,CAAAxB,IAAA;QACA;;QAEA;QACA,KAAAQ,UAAA,CAAAkB,OAAA,GAAAL,KAAA;UACAD,OAAA,CAAAC,KAAA,kBAAAA,KAAA;UACA,KAAAZ,gBAAA;QACA;;QAEA;QACA,KAAAD,UAAA,CAAAmB,KAAA;MACA,SAAAN,KAAA;QACAD,OAAA,CAAAC,KAAA,uBAAAA,KAAA;MACA;IACA;IAEA;IACAI,oBAAAG,OAAA;MACA,QAAAA,OAAA,CAAAC,IAAA;QACA;UACA,KAAApB,gBAAA;UACAW,OAAA,CAAAU,GAAA;UACA;QACA;UACA,KAAArB,gBAAA;UACAW,OAAA,CAAAU,GAAA;UACA;QACA;UACAV,OAAA,CAAAC,KAAA,iBAAAO,OAAA,CAAA5B,IAAA;UACA,KAAAS,gBAAA;UACA;QACA;QACA;UACAW,OAAA,CAAAU,GAAA,YAAAF,OAAA,CAAAC,IAAA;MACA;IACA;EACA;EACAE,cAAA;IACA;IACA,SAAAvB,UAAA;MACA,KAAAA,UAAA,CAAAwB,KAAA;MACA,KAAAzB,MAAA;MACA,KAAAC,UAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}