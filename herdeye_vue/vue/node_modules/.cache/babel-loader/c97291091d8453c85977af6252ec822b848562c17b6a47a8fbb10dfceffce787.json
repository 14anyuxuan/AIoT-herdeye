{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { ref } from 'vue';\n\n// 创建事件总线（优化内存泄漏）\nconst eventBus = {\n  events: {},\n  on(event, callback) {\n    if (!this.events[event]) this.events[event] = [];\n    this.events[event].push(callback);\n  },\n  emit(event, data) {\n    if (this.events[event]) {\n      // 复制一份回调列表，避免执行中删除导致的问题\n      [...this.events[event]].forEach(callback => callback(data));\n    }\n  },\n  off(event, callback) {\n    if (this.events[event]) {\n      this.events[event] = this.events[event].filter(cb => cb !== callback);\n    }\n  }\n};\n\n// SSE连接配置\nconst backendUrl = new WebSocket(\"ws://8.152.103.136:9090/sse/main\");\nlet mainEs = null;\nlet mapEs = null;\nlet isConnected = ref(false);\n\n// 创建SSE连接的通用方法（优化连接管理）\nconst createSSE = (url, eventName) => {\n  // 关闭已存在的连接并清空引用\n  if (eventName === 'main' && mainEs) {\n    mainEs.close();\n    mainEs = null;\n  }\n  if (eventName === 'map' && mapEs) {\n    mapEs.close();\n    mapEs = null;\n  }\n  const es = new EventSource(url);\n\n  // 连接状态检查函数\n  const updateConnectionStatus = () => {\n    const isOpen = es.readyState === EventSource.OPEN;\n    isConnected.value = isOpen;\n    eventBus.emit('connectionStatus', isOpen);\n  };\n\n  // 初始连接成功\n  es.onopen = () => {\n    updateConnectionStatus();\n    console.log(`${eventName} SSE连接已建立`);\n  };\n\n  // 接收消息处理\n  es.onmessage = ev => {\n    try {\n      const data = JSON.parse(ev.data);\n      eventBus.emit(eventName, data);\n    } catch (e) {\n      console.error(`${eventName} SSE数据解析失败:`, e);\n      console.error(`原始数据:`, ev.data); // 打印原始数据方便调试\n    }\n  };\n\n  // 错误处理与重连\n  es.onerror = () => {\n    updateConnectionStatus();\n    console.error(`${eventName} SSE连接错误，尝试重连...`);\n    // 避免重复重连（仅当前连接实例未被替换时）\n    if (eventName === 'main' && mainEs === es || eventName === 'map' && mapEs === es) {\n      setTimeout(() => createSSE(url, eventName), 5000);\n    }\n  };\n\n  // 后端主动关闭连接时重连\n  es.onclose = () => {\n    updateConnectionStatus();\n    console.log(`${eventName} SSE连接被关闭，尝试重连...`);\n    if (eventName === 'main' && mainEs === es || eventName === 'map' && mapEs === es) {\n      setTimeout(() => createSSE(url, eventName), 5000);\n    }\n  };\n\n  // 保存连接实例\n  if (eventName === 'main') mainEs = es;\n  if (eventName === 'map') mapEs = es;\n  return es;\n};\n\n// 初始化连接（使用区分的端点）\nconst initConnections = () => {\n  createSSE(`${backendUrl}/sse/main`, 'main'); // 主数据端点\n  createSSE(`${backendUrl}/sse/map`, 'map'); // 地图数据端点\n};\n\n// 关闭所有连接（优化引用清理）\nconst closeConnections = () => {\n  if (mainEs) {\n    mainEs.close();\n    mainEs = null;\n  }\n  if (mapEs) {\n    mapEs.close();\n    mapEs = null;\n  }\n  isConnected.value = false;\n  eventBus.emit('connectionStatus', false);\n};\n\n// 导出服务（优化事件解绑）\nexport default {\n  eventBus,\n  isConnected,\n  initConnections,\n  closeConnections,\n  onMainData: callback => {\n    eventBus.on('main', callback);\n    return () => eventBus.off('main', callback); // 返回解绑函数\n  },\n  onMapData: callback => {\n    eventBus.on('map', callback);\n    return () => eventBus.off('map', callback);\n  },\n  onConnectionStatus: callback => {\n    eventBus.on('connectionStatus', callback);\n    return () => eventBus.off('connectionStatus', callback);\n  }\n};","map":{"version":3,"names":["ref","eventBus","events","on","event","callback","push","emit","data","forEach","off","filter","cb","backendUrl","WebSocket","mainEs","mapEs","isConnected","createSSE","url","eventName","close","es","EventSource","updateConnectionStatus","isOpen","readyState","OPEN","value","onopen","console","log","onmessage","ev","JSON","parse","e","error","onerror","setTimeout","onclose","initConnections","closeConnections","onMainData","onMapData","onConnectionStatus"],"sources":["C:/Users/Q/Desktop/项目脚手架/manager/vue/src/services/sseService.js"],"sourcesContent":["import { ref } from 'vue'\r\n\r\n// 创建事件总线（优化内存泄漏）\r\nconst eventBus = {\r\n  events: {},\r\n  on(event, callback) {\r\n    if (!this.events[event]) this.events[event] = [];\r\n    this.events[event].push(callback);\r\n  },\r\n  emit(event, data) {\r\n    if (this.events[event]) {\r\n      // 复制一份回调列表，避免执行中删除导致的问题\r\n      [...this.events[event]].forEach(callback => callback(data));\r\n    }\r\n  },\r\n  off(event, callback) {\r\n    if (this.events[event]) {\r\n      this.events[event] = this.events[event].filter(cb => cb !== callback);\r\n    }\r\n  }\r\n};\r\n\r\n// SSE连接配置\r\nconst backendUrl = new WebSocket(\"ws://8.152.103.136:9090/sse/main\");\r\nlet mainEs = null;\r\nlet mapEs = null;\r\nlet isConnected = ref(false);\r\n\r\n// 创建SSE连接的通用方法（优化连接管理）\r\nconst createSSE = (url, eventName) => {\r\n  // 关闭已存在的连接并清空引用\r\n  if (eventName === 'main' && mainEs) {\r\n    mainEs.close();\r\n    mainEs = null;\r\n  }\r\n  if (eventName === 'map' && mapEs) {\r\n    mapEs.close();\r\n    mapEs = null;\r\n  }\r\n\r\n  const es = new EventSource(url);\r\n\r\n  // 连接状态检查函数\r\n  const updateConnectionStatus = () => {\r\n    const isOpen = es.readyState === EventSource.OPEN;\r\n    isConnected.value = isOpen;\r\n    eventBus.emit('connectionStatus', isOpen);\r\n  };\r\n\r\n  // 初始连接成功\r\n  es.onopen = () => {\r\n    updateConnectionStatus();\r\n    console.log(`${eventName} SSE连接已建立`);\r\n  };\r\n\r\n  // 接收消息处理\r\n  es.onmessage = (ev) => {\r\n    try {\r\n      const data = JSON.parse(ev.data);\r\n      eventBus.emit(eventName, data);\r\n    } catch (e) {\r\n      console.error(`${eventName} SSE数据解析失败:`, e);\r\n      console.error(`原始数据:`, ev.data); // 打印原始数据方便调试\r\n    }\r\n  };\r\n\r\n  // 错误处理与重连\r\n  es.onerror = () => {\r\n    updateConnectionStatus();\r\n    console.error(`${eventName} SSE连接错误，尝试重连...`);\r\n    // 避免重复重连（仅当前连接实例未被替换时）\r\n    if ((eventName === 'main' && mainEs === es) || (eventName === 'map' && mapEs === es)) {\r\n      setTimeout(() => createSSE(url, eventName), 5000);\r\n    }\r\n  };\r\n\r\n  // 后端主动关闭连接时重连\r\n  es.onclose = () => {\r\n    updateConnectionStatus();\r\n    console.log(`${eventName} SSE连接被关闭，尝试重连...`);\r\n    if ((eventName === 'main' && mainEs === es) || (eventName === 'map' && mapEs === es)) {\r\n      setTimeout(() => createSSE(url, eventName), 5000);\r\n    }\r\n  };\r\n\r\n  // 保存连接实例\r\n  if (eventName === 'main') mainEs = es;\r\n  if (eventName === 'map') mapEs = es;\r\n\r\n  return es;\r\n};\r\n\r\n// 初始化连接（使用区分的端点）\r\nconst initConnections = () => {\r\n  createSSE(`${backendUrl}/sse/main`, 'main');    // 主数据端点\r\n  createSSE(`${backendUrl}/sse/map`, 'map');    // 地图数据端点\r\n};\r\n\r\n// 关闭所有连接（优化引用清理）\r\nconst closeConnections = () => {\r\n  if (mainEs) {\r\n    mainEs.close();\r\n    mainEs = null;\r\n  }\r\n  if (mapEs) {\r\n    mapEs.close();\r\n    mapEs = null;\r\n  }\r\n  isConnected.value = false;\r\n  eventBus.emit('connectionStatus', false);\r\n};\r\n\r\n// 导出服务（优化事件解绑）\r\nexport default {\r\n  eventBus,\r\n  isConnected,\r\n  initConnections,\r\n  closeConnections,\r\n  onMainData: (callback) => {\r\n    eventBus.on('main', callback);\r\n    return () => eventBus.off('main', callback); // 返回解绑函数\r\n  },\r\n  onMapData: (callback) => {\r\n    eventBus.on('map', callback);\r\n    return () => eventBus.off('map', callback);\r\n  },\r\n  onConnectionStatus: (callback) => {\r\n    eventBus.on('connectionStatus', callback);\r\n    return () => eventBus.off('connectionStatus', callback);\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}