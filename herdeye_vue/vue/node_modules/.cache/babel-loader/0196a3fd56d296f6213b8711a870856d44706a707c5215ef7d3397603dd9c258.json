{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport axios from \"axios\";\nexport default {\n  name: 'Home',\n  data() {\n    return {\n      updateTime: new Date().toLocaleString(),\n      models: {\n        drone: 'drone',\n        ground: 'ground'\n      },\n      // 模型配置聚合\n      streams: {\n        // 视频流配置聚合\n        drone: {\n          isStreaming: false,\n          src: '',\n          latestUrl: '',\n          detections: [],\n          isLoading: false,\n          intervals: {\n            refresh: null,\n            detection: null\n          }\n        },\n        ground: {\n          isStreaming: false,\n          src: '',\n          latestUrl: '',\n          detections: [],\n          isLoading: false,\n          intervals: {\n            refresh: null,\n            detection: null\n          }\n        }\n      }\n    };\n  },\n  methods: {\n    // 模型切换\n    async handleModelChange(type) {\n      try {\n        await this.$request.get(`http://localhost:5000/switch_model?model=${this.models[type]}`);\n        this.$message.success(`${type === 'drone' ? '无人机' : '地面端'}模型切换成功`);\n      } catch (error) {\n        this.$message.error(`${type === 'drone' ? '无人机' : '地面端'}模型切换失败`);\n      }\n    },\n    // 跳转GPS页面\n    navigateToGPS() {\n      this.$router.push('/GPS');\n    },\n    // 切换视频流状态\n    toggleStream(type) {\n      this.streams[type].isStreaming ? this.stopStream(type) : this.startStream(type);\n    },\n    // 启动视频流\n    startStream(type) {\n      const stream = this.streams[type];\n      stream.isStreaming = true;\n      stream.src = `http://localhost:5000/video_feed?type=${type}&t=${Date.now()}`;\n\n      // 清除旧定时器\n      Object.values(stream.intervals).forEach(interval => interval && clearInterval(interval));\n\n      // 启动检测轮询\n      stream.intervals.detection = setInterval(() => this.fetchDetections(type), 1000);\n    },\n    // 停止视频流\n    async stopStream(type) {\n      const stream = this.streams[type];\n      stream.isStreaming = false;\n      stream.src = '';\n      stream.detections = [];\n\n      // 清除检测轮询\n      clearInterval(stream.intervals.detection);\n\n      // 获取最新视频并启动刷新轮询\n      await this.fetchLatestVideo(type);\n      stream.intervals.refresh = setInterval(() => !stream.isStreaming && this.fetchLatestVideo(type), 5000);\n    },\n    // 获取实时检测结果\n    async fetchDetections(type) {\n      const stream = this.streams[type];\n      stream.isLoading = true;\n      try {\n        const res = await axios.get(`http://localhost:5000/realtime_detections?type=${type}`);\n        stream.detections = res.data.detections.map(d => ({\n          ...d,\n          confidence: parseFloat(d.confidence.toFixed(3))\n        }));\n      } catch (error) {\n        console.error(`${type === 'drone' ? '无人机' : '地面端'}检测数据获取失败`, error);\n      } finally {\n        stream.isLoading = false;\n      }\n    },\n    // 获取最新录制视频\n    async fetchLatestVideo(type) {\n      try {\n        const res = await this.$request.get(`http://localhost:5000/latest_video?type=${type}`);\n        this.streams[type].latestUrl = res.url;\n      } catch (error) {\n        console.error(`${type === 'drone' ? '无人机' : '地面端'}视频获取失败`, error);\n      }\n    },\n    // 格式化置信度\n    formatConfidence(percentage) {\n      return `${percentage.toFixed(1)}%`;\n    },\n    // 置信度颜色映射\n    getConfidenceColor(percentage) {\n      return percentage > 90 ? '#67C23A' : percentage > 70 ? '#E6A23C' : '#F56C6C';\n    }\n  },\n  // 清理定时器\n  beforeUnmount() {\n    Object.values(this.streams).forEach(stream => {\n      Object.values(stream.intervals).forEach(interval => interval && clearInterval(interval));\n    });\n  },\n  // 初始化时间更新\n  created() {\n    setInterval(() => this.updateTime = new Date().toLocaleString(), 60000);\n  }\n};","map":{"version":3,"names":["axios","name","data","updateTime","Date","toLocaleString","models","drone","ground","streams","isStreaming","src","latestUrl","detections","isLoading","intervals","refresh","detection","methods","handleModelChange","type","$request","get","$message","success","error","navigateToGPS","$router","push","toggleStream","stopStream","startStream","stream","now","Object","values","forEach","interval","clearInterval","setInterval","fetchDetections","fetchLatestVideo","res","map","d","confidence","parseFloat","toFixed","console","url","formatConfidence","percentage","getConfidenceColor","beforeUnmount","created"],"sources":["src/views/manager/video.vue"],"sourcesContent":["<template>\r\n  <div class=\"pasture-eye-page\">\r\n    <!-- 页面标题区域 -->\r\n    <header class=\"page-header\">\r\n      <h1 class=\"page-title\">牧瞳系统</h1>\r\n      <div class=\"page-meta\">\r\n        <span class=\"update-time\">上次更新：{{ updateTime }}</span>\r\n      </div>\r\n    </header>\r\n\r\n    <!-- 检测功能模块 -->\r\n    <el-card class=\"detection-card\">\r\n      <!-- 无人机视频流 -->\r\n      <div class=\"video-module\">\r\n        <div class=\"detection-header\">\r\n          <el-select v-model=\"models.drone\" @change=\"handleModelChange('drone')\" placeholder=\"请选择模型\">\r\n            <el-option label=\"无人机检测模型\" value=\"drone\"></el-option>\r\n          </el-select>\r\n          <el-button\r\n            :type=\"streams.drone.isStreaming ? 'danger' : 'success'\"\r\n            @click=\"toggleStream('drone')\"\r\n            style=\"margin-left: 10px\"\r\n          >\r\n            {{ streams.drone.isStreaming ? '关闭视频' : '开启视频' }}\r\n          </el-button>\r\n        </div>\r\n\r\n        <div class=\"video-container\">\r\n          <img\r\n            :src=\"streams.drone.src\"\r\n            class=\"video-stream\"\r\n            v-show=\"streams.drone.isStreaming\"\r\n            alt=\"无人机视频流\"\r\n          />\r\n          <div v-show=\"!streams.drone.isStreaming && streams.drone.latestUrl\" class=\"video-links\">\r\n            <h3>无人机录制视频</h3>\r\n            <el-link :href=\"streams.drone.latestUrl\" target=\"_blank\" type=\"primary\">\r\n              下载最新视频 <i class=\"el-icon-download\"></i>\r\n            </el-link>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 无人机检测结果 -->\r\n        <div class=\"realtime-results\">\r\n          <h3>无人机实时检测结果</h3>\r\n          <el-table\r\n            :data=\"streams.drone.detections\"\r\n            stripe\r\n            height=\"300\"\r\n            style=\"width: 100%\"\r\n            v-loading=\"streams.drone.isLoading\"\r\n          >\r\n            <el-table-column prop=\"label\" label=\"目标类型\" width=\"120\">\r\n              <template #default=\"{row}\"><el-tag type=\"info\">{{ row.label }}</el-tag></template>\r\n            </el-table-column>\r\n            <el-table-column label=\"置信度\" width=\"120\">\r\n              <template #default=\"{row}\">\r\n                <el-progress\r\n                  :percentage=\"row.confidence * 100\"\r\n                  :format=\"formatConfidence\"\r\n                  :color=\"getConfidenceColor\"\r\n                  stroke-width=\"16\"\r\n                  status=\"success\"\r\n                />\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column label=\"位置坐标\">\r\n              <template #default=\"{row}\">\r\n                <div class=\"coordinates\">\r\n                  <span class=\"coord-item\">X: {{ row.x.toFixed(0) }}</span>\r\n                  <span class=\"coord-item\">Y: {{ row.y.toFixed(0) }}</span>\r\n                </div>\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column label=\"原始位置\" width=\"180\">\r\n              <template #default=\"{row}\">\r\n                <div class=\"raw-coords\">\r\n                  <div>xmin: {{ row.xmin }}</div>\r\n                  <div>ymin: {{ row.ymin }}</div>\r\n                  <div>xmax: {{ row.xmax }}</div>\r\n                  <div>ymax: {{ row.ymax }}</div>\r\n                </div>\r\n              </template>\r\n            </el-table-column>\r\n            <template #empty>\r\n              <div class=\"empty-status\">\r\n                <i class=\"el-icon-video-camera-solid\"></i>\r\n                <p>{{ streams.drone.isStreaming ? '暂无检测数据' : '请开启视频流获取结果' }}</p>\r\n              </div>\r\n            </template>\r\n          </el-table>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 分隔线 -->\r\n      <div class=\"video-separator\"></div>\r\n\r\n      <!-- 地面端视频流 -->\r\n      <div class=\"video-module\">\r\n        <div class=\"detection-header\">\r\n          <el-select v-model=\"models.ground\" @change=\"handleModelChange('ground')\" placeholder=\"请选择模型\">\r\n            <el-option label=\"地面端检测模型\" value=\"ground\"></el-option>\r\n          </el-select>\r\n          <el-button\r\n            :type=\"streams.ground.isStreaming ? 'danger' : 'success'\"\r\n            @click=\"toggleStream('ground')\"\r\n            style=\"margin-left: 10px\"\r\n          >\r\n            {{ streams.ground.isStreaming ? '关闭视频' : '开启视频' }}\r\n          </el-button>\r\n        </div>\r\n\r\n        <div class=\"video-container\">\r\n          <img\r\n            :src=\"streams.ground.src\"\r\n            class=\"video-stream\"\r\n            v-show=\"streams.ground.isStreaming\"\r\n            alt=\"地面端视频流\"\r\n          />\r\n          <div v-show=\"!streams.ground.isStreaming && streams.ground.latestUrl\" class=\"video-links\">\r\n            <h3>地面端录制视频</h3>\r\n            <el-link :href=\"streams.ground.latestUrl\" target=\"_blank\" type=\"primary\">\r\n              下载最新视频 <i class=\"el-icon-download\"></i>\r\n            </el-link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: 'Home',\r\n  data() {\r\n    return {\r\n      updateTime: new Date().toLocaleString(),\r\n      models: { drone: 'drone', ground: 'ground' }, // 模型配置聚合\r\n      streams: { // 视频流配置聚合\r\n        drone: {\r\n          isStreaming: false,\r\n          src: '',\r\n          latestUrl: '',\r\n          detections: [],\r\n          isLoading: false,\r\n          intervals: { refresh: null, detection: null }\r\n        },\r\n        ground: {\r\n          isStreaming: false,\r\n          src: '',\r\n          latestUrl: '',\r\n          detections: [],\r\n          isLoading: false,\r\n          intervals: { refresh: null, detection: null }\r\n        }\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    // 模型切换\r\n    async handleModelChange(type) {\r\n      try {\r\n        await this.$request.get(`http://localhost:5000/switch_model?model=${this.models[type]}`);\r\n        this.$message.success(`${type === 'drone' ? '无人机' : '地面端'}模型切换成功`);\r\n      } catch (error) {\r\n        this.$message.error(`${type === 'drone' ? '无人机' : '地面端'}模型切换失败`);\r\n      }\r\n    },\r\n\r\n    // 跳转GPS页面\r\n    navigateToGPS() {\r\n      this.$router.push('/GPS');\r\n    },\r\n\r\n    // 切换视频流状态\r\n    toggleStream(type) {\r\n      this.streams[type].isStreaming ? this.stopStream(type) : this.startStream(type);\r\n    },\r\n\r\n    // 启动视频流\r\n    startStream(type) {\r\n      const stream = this.streams[type];\r\n      stream.isStreaming = true;\r\n      stream.src = `http://localhost:5000/video_feed?type=${type}&t=${Date.now()}`;\r\n      \r\n      // 清除旧定时器\r\n      Object.values(stream.intervals).forEach(interval => interval && clearInterval(interval));\r\n      \r\n      // 启动检测轮询\r\n      stream.intervals.detection = setInterval(() => this.fetchDetections(type), 1000);\r\n    },\r\n\r\n    // 停止视频流\r\n    async stopStream(type) {\r\n      const stream = this.streams[type];\r\n      stream.isStreaming = false;\r\n      stream.src = '';\r\n      stream.detections = [];\r\n      \r\n      // 清除检测轮询\r\n      clearInterval(stream.intervals.detection);\r\n      \r\n      // 获取最新视频并启动刷新轮询\r\n      await this.fetchLatestVideo(type);\r\n      stream.intervals.refresh = setInterval(() => !stream.isStreaming && this.fetchLatestVideo(type), 5000);\r\n    },\r\n\r\n    // 获取实时检测结果\r\n    async fetchDetections(type) {\r\n      const stream = this.streams[type];\r\n      stream.isLoading = true;\r\n      try {\r\n        const res = await axios.get(`http://localhost:5000/realtime_detections?type=${type}`);\r\n        stream.detections = res.data.detections.map(d => ({\r\n          ...d,\r\n          confidence: parseFloat(d.confidence.toFixed(3))\r\n        }));\r\n      } catch (error) {\r\n        console.error(`${type === 'drone' ? '无人机' : '地面端'}检测数据获取失败`, error);\r\n      } finally {\r\n        stream.isLoading = false;\r\n      }\r\n    },\r\n\r\n    // 获取最新录制视频\r\n    async fetchLatestVideo(type) {\r\n      try {\r\n        const res = await this.$request.get(`http://localhost:5000/latest_video?type=${type}`);\r\n        this.streams[type].latestUrl = res.url;\r\n      } catch (error) {\r\n        console.error(`${type === 'drone' ? '无人机' : '地面端'}视频获取失败`, error);\r\n      }\r\n    },\r\n\r\n    // 格式化置信度\r\n    formatConfidence(percentage) {\r\n      return `${percentage.toFixed(1)}%`;\r\n    },\r\n\r\n    // 置信度颜色映射\r\n    getConfidenceColor(percentage) {\r\n      return percentage > 90 ? '#67C23A' : percentage > 70 ? '#E6A23C' : '#F56C6C';\r\n    }\r\n  },\r\n  // 清理定时器\r\n  beforeUnmount() {\r\n    Object.values(this.streams).forEach(stream => {\r\n      Object.values(stream.intervals).forEach(interval => interval && clearInterval(interval));\r\n    });\r\n  },\r\n  // 初始化时间更新\r\n  created() {\r\n    setInterval(() => this.updateTime = new Date().toLocaleString(), 60000);\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.pasture-eye-page {\r\n  padding: 20px;\r\n}\r\n\r\n.page-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 25px;\r\n  padding-bottom: 15px;\r\n  border-bottom: 1px solid #f0f2f5;\r\n}\r\n\r\n.page-title {\r\n  margin: 0;\r\n  font-size: 20px;\r\n  color: #2c3e50;\r\n}\r\n\r\n.page-meta {\r\n  color: #606266;\r\n  font-size: 14px;\r\n}\r\n\r\n.ai-chat-card {\r\n  margin-right: 10px;\r\n}\r\n\r\n.detection-card {\r\n  padding: 25px;\r\n  border-radius: 6px;\r\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.video-module {\r\n  margin-bottom: 35px;\r\n  padding-bottom: 20px;\r\n}\r\n\r\n.detection-header {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 18px;\r\n}\r\n\r\n.video-container {\r\n  border: 1px solid #ebeef5;\r\n  border-radius: 6px;\r\n  padding: 15px;\r\n  background-color: #fafafa;\r\n  margin-bottom: 20px;\r\n  min-height: 320px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.video-stream {\r\n  max-width: 100%;\r\n  height: auto;\r\n  min-height: 300px;\r\n  object-fit: contain;\r\n  border-radius: 4px;\r\n}\r\n\r\n.video-links {\r\n  text-align: center;\r\n  padding: 20px;\r\n}\r\n\r\n.video-links h3 {\r\n  margin-bottom: 15px;\r\n  font-size: 16px;\r\n  color: #303133;\r\n}\r\n\r\n.realtime-results {\r\n  margin-top: 20px;\r\n}\r\n\r\n.realtime-results h3 {\r\n  margin: 0 0 15px 0;\r\n  font-size: 16px;\r\n  color: #303133;\r\n  font-weight: 500;\r\n}\r\n\r\n.video-separator {\r\n  height: 1px;\r\n  background-color: #ebeef5;\r\n  margin: 30px 0;\r\n}\r\n\r\n.el-table {\r\n  border-radius: 6px;\r\n  border: 1px solid #ebeef5;\r\n}\r\n\r\n.coordinates {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.coord-item {\r\n  font-family: monospace;\r\n  color: #2c3e50;\r\n}\r\n\r\n.raw-coords {\r\n  font-size: 13px;\r\n  color: #606266;\r\n  font-family: monospace;\r\n}\r\n\r\n.empty-status {\r\n  text-align: center;\r\n  padding: 30px 0;\r\n  color: #909399;\r\n}\r\n\r\n.empty-status i {\r\n  font-size: 36px;\r\n  margin-bottom: 10px;\r\n  display: block;\r\n}\r\n\r\n/* 响应式调整 */\r\n@media (max-width: 768px) {\r\n  .page-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 15px;\r\n    margin-bottom: 20px;\r\n  }\r\n  .video-module {\r\n    margin-bottom: 25px;\r\n  }\r\n  .detection-card {\r\n    padding: 15px;\r\n  }\r\n  .video-container {\r\n    min-height: 250px;\r\n    margin-bottom: 15px;\r\n  }\r\n  .video-separator {\r\n    margin: 20px 0;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}