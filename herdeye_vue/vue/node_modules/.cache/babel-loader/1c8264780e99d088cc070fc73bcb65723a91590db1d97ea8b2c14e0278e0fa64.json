{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport * as echarts from 'echarts';\n// 确保图片路径正确（避免404错误）\nimport markerIcon from '@/assets/imgs/icons8-圈向上-64.png';\nexport default {\n  name: 'FarmMonitor',\n  data() {\n    return {\n      // 核心数据\n      weather: {\n        date: `${new Date().getMonth() + 1}月${new Date().getDate()}日`,\n        weekday: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'][new Date().getDay()],\n        weather: '晴',\n        tempMin: 18,\n        tempMax: 30,\n        windDir: '东风',\n        windForce: '3级'\n      },\n      currDate: new Date().toLocaleDateString(),\n      temp: 22,\n      hum: 50,\n      // 新增：标记数据是否有效\n      tempValid: false,\n      humValid: false,\n      weightValid: false,\n      tempHistory: [{\n        time: '00:00',\n        value: 22\n      }, {\n        time: '00:05',\n        value: 22.5\n      }],\n      humHistory: [{\n        time: '00:00',\n        value: 50\n      }, {\n        time: '00:05',\n        value: 49.5\n      }],\n      tempRange: {\n        min: 18,\n        max: 26\n      },\n      humRange: {\n        min: 40,\n        max: 60\n      },\n      // WebSocket和Worker相关状态\n      worker: null,\n      workerPort: null,\n      connError: '',\n      // 连接错误信息\n\n      // 设备数据\n      water: {\n        status: 0,\n        value: 0\n      },\n      weight: 50,\n      // 优化：用对象映射设备状态，避免频繁find遍历\n      devices: [{\n        name: '水泵',\n        status: 0,\n        key: 'pump'\n      }, {\n        name: '电机',\n        status: 0,\n        key: 'motor'\n      }, {\n        name: '灯光',\n        status: 0,\n        key: 'light'\n      }, {\n        name: '阀门',\n        status: 0,\n        key: 'door'\n      }, {\n        name: '加热',\n        status: 0,\n        key: 'heat'\n      }, {\n        name: '风机',\n        status: 0,\n        key: 'fan'\n      }],\n      // 连接状态\n      mainConn: false,\n      lastUpdate: '-',\n      maxHistory: 10,\n      // 进度条相关配置\n      barHeight: 120,\n      colors: ['#43a047', '#8bc34a', '#cddc39'],\n      // 地图相关（替换为你的高德Key）\n      lnglat: '',\n      course: '',\n      mapStatus: '地图加载中...',\n      mapConn: false,\n      map: null,\n      marker: null,\n      amapKey: '你的高德地图Key',\n      // 必须替换为实际有效的Key\n\n      // 图表实例\n      tempChart: null,\n      humChart: null\n    };\n  },\n  computed: {\n    weightPercent() {\n      return Math.max(0, Math.min(100, Math.round(this.weight)));\n    },\n    tempWarn() {\n      return this.tempValid && (this.temp < this.tempRange.min || this.temp > this.tempRange.max);\n    },\n    humWarn() {\n      return this.humValid && (this.hum < this.humRange.min || this.hum > this.humRange.max);\n    },\n    waterAlarm() {\n      return this.water.value > 8.5 || this.water.value < 2.0;\n    },\n    gradientBg() {\n      return `linear-gradient(to top, ${this.colors.join(', ')})`;\n    }\n  },\n  methods: {\n    // 图表初始化与渲染（增强DOM检查）\n    initCharts() {\n      const tempDom = document.getElementById('tempChart');\n      const humDom = document.getElementById('humChart');\n      if (!tempDom || !humDom) {\n        console.error('图表DOM元素不存在，重试初始化...');\n        // 1秒后重试（避免DOM未加载完成）\n        setTimeout(() => this.initCharts(), 1000);\n        return;\n      }\n      this.tempChart = echarts.init(tempDom);\n      this.humChart = echarts.init(humDom);\n      window.addEventListener('resize', () => {\n        this.tempChart?.resize();\n        this.humChart?.resize();\n      });\n      this.renderCharts();\n    },\n    renderCharts() {\n      if (!this.tempChart || !this.humChart) return; // 避免未初始化时调用\n\n      // 温度图表配置（保持不变）\n      this.tempChart.setOption({\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: {\n          type: 'category',\n          data: this.tempHistory.map(i => i.time),\n          axisLabel: {\n            rotate: 30\n          }\n        },\n        yAxis: {\n          type: 'value',\n          name: '温度(°C)',\n          min: Math.min(...this.tempHistory.map(i => i.value), this.tempRange.min) - 2,\n          max: Math.max(...this.tempHistory.map(i => i.value), this.tempRange.max) + 2,\n          markLine: {\n            data: [{\n              yAxis: this.tempRange.min,\n              name: '最低阈值',\n              lineStyle: {\n                color: 'red'\n              }\n            }, {\n              yAxis: this.tempRange.max,\n              name: '最高阈值',\n              lineStyle: {\n                color: 'red'\n              }\n            }]\n          }\n        },\n        series: [{\n          name: '温度',\n          type: 'line',\n          data: this.tempHistory.map(i => i.value),\n          smooth: true,\n          lineStyle: {\n            color: '#e74c3c'\n          },\n          itemStyle: {\n            color: '#e74c3c'\n          },\n          areaStyle: {\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: 'rgba(231,76,60,0.3)'\n            }, {\n              offset: 1,\n              color: 'rgba(231,76,60,0)'\n            }])\n          }\n        }]\n      });\n\n      // 湿度图表配置（保持不变）\n      this.humChart.setOption({\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: {\n          type: 'category',\n          data: this.humHistory.map(i => i.time),\n          axisLabel: {\n            rotate: 30\n          }\n        },\n        yAxis: {\n          type: 'value',\n          name: '湿度(%)',\n          min: Math.min(...this.humHistory.map(i => i.value), this.humRange.min) - 5,\n          max: Math.max(...this.humHistory.map(i => i.value), this.humRange.max) + 5,\n          markLine: {\n            data: [{\n              yAxis: this.humRange.min,\n              name: '最低阈值',\n              lineStyle: {\n                color: 'blue'\n              }\n            }, {\n              yAxis: this.humRange.max,\n              name: '最高阈值',\n              lineStyle: {\n                color: 'blue'\n              }\n            }]\n          }\n        },\n        series: [{\n          name: '湿度',\n          type: 'line',\n          data: this.humHistory.map(i => i.value),\n          smooth: true,\n          lineStyle: {\n            color: '#3498db'\n          },\n          itemStyle: {\n            color: '#3498db'\n          },\n          areaStyle: {\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: 'rgba(52,152,219,0.3)'\n            }, {\n              offset: 1,\n              color: 'rgba(52,152,219,0)'\n            }])\n          }\n        }]\n      });\n    },\n    // 历史数据更新（增加数据有效性判断）\n    updateHistory(ref, val, time) {\n      if (typeof val !== 'number' || isNaN(val)) {\n        console.warn('无效的历史数据，跳过更新');\n        return;\n      }\n      ref.push({\n        time,\n        value: val\n      });\n      if (ref.length > this.maxHistory) ref.shift();\n    },\n    // 地图初始化（修复Key问题和加载错误处理）\n    initMap() {\n      if (!this.amapKey || this.amapKey === '你的高德地图Key') {\n        this.mapStatus = '请配置有效的高德地图Key';\n        console.error('未配置高德地图Key，地图无法加载');\n        return;\n      }\n      const loadMap = () => new Promise((res, rej) => {\n        if (window.AMap) return res(window.AMap);\n        const script = document.createElement('script');\n        script.src = `https://webapi.amap.com/maps?v=1.4.15&key=${this.amapKey}`; // 使用配置的Key\n        script.onload = () => {\n          if (window.AMap) res(window.AMap);else rej(new Error('地图加载失败：未找到AMap对象'));\n        };\n        script.onerror = () => rej(new Error('地图脚本加载失败（可能是Key无效或网络问题）'));\n        document.head.appendChild(script);\n      });\n      loadMap().then(AMap => {\n        this.map = new AMap.Map('map', {\n          resizeEnable: true,\n          zoom: 16,\n          center: [116.397470, 39.908823],\n          viewMode: '2D'\n        });\n\n        // 检查图片是否加载成功（避免marker图标404）\n        const checkMarkerIcon = () => new Promise((res, rej) => {\n          const img = new Image();\n          img.src = markerIcon;\n          img.onload = () => res();\n          img.onerror = () => rej(new Error('标记图标加载失败，请检查路径'));\n        });\n        checkMarkerIcon().then(() => {\n          this.marker = new AMap.Marker({\n            position: [116.397470, 39.908823],\n            icon: new AMap.Icon({\n              size: new AMap.Size(32, 32),\n              image: markerIcon,\n              imageSize: new AMap.Size(64, 64),\n              imageOffset: new AMap.Pixel(-16, -16)\n            }),\n            anchor: 'center'\n          });\n          this.map.add(this.marker);\n        }).catch(err => {\n          console.error(err);\n          this.mapStatus += '（标记图标加载失败）';\n        });\n        this.map.on('complete', () => this.mapStatus = '地图已就绪');\n        this.map.on('error', err => this.mapStatus = `地图错误：${err.message}`);\n      }).catch(err => {\n        this.mapStatus = `地图加载失败：${err.message}`;\n        console.error(err);\n      });\n    },\n    // 初始化SharedWorker（修复路径问题和错误处理）\n    initWorker() {\n      if (!window.SharedWorker) {\n        this.connError = '浏览器不支持SharedWorker';\n        console.error('当前浏览器不支持SharedWorker，无法建立连接');\n        return;\n      }\n      try {\n        // 修复：根据实际项目结构调整worker路径（例如放在public目录下）\n        // 如果worker文件在src/workers目录，需配置webpack处理或移动到public\n        this.worker = new SharedWorker('/workers/websocket-shared-worker.js'); // 推荐路径\n        this.workerPort = this.worker.port;\n\n        // 监听Worker消息\n        this.workerPort.onmessage = event => {\n          this.handleWorkerMessage(event.data);\n        };\n\n        // 监听错误（更详细的错误信息）\n        this.workerPort.onerror = error => {\n          this.connError = `Worker错误: ${error.message}`;\n          console.error('Worker错误:', error);\n          this.mainConn = false;\n          this.mapConn = false;\n          error.preventDefault(); // 阻止默认错误冒泡\n        };\n\n        // 启动连接并发送初始化指令\n        this.workerPort.start();\n        this.workerPort.postMessage({\n          type: 'INIT'\n        }); // 告知worker初始化连接\n      } catch (error) {\n        this.connError = `Worker初始化失败: ${error.message}`;\n        console.error('初始化SharedWorker失败:', error);\n        // 尝试降级方案：直接使用WebSocket（如果worker不可用）\n        this.fallbackToWebSocket();\n      }\n    },\n    // 降级方案：直接使用WebSocket（当SharedWorker失败时）\n    fallbackToWebSocket() {\n      console.log('尝试使用WebSocket降级方案...');\n      const ws = new WebSocket('ws://你的后端WebSocket地址'); // 替换为实际地址\n\n      ws.onopen = () => {\n        this.mainConn = true;\n        this.mapConn = true;\n        this.connError = '';\n      };\n      ws.onmessage = event => {\n        const data = JSON.parse(event.data);\n        this.handleWorkerMessage(data); // 复用消息处理逻辑\n      };\n      ws.onclose = () => {\n        this.mainConn = false;\n        this.mapConn = false;\n        this.connError = 'WebSocket连接已关闭';\n      };\n      ws.onerror = error => {\n        this.connError = `WebSocket错误: ${error.message}`;\n        console.error('WebSocket错误:', error);\n      };\n    },\n    // 处理Worker消息（增强数据校验）\n    handleWorkerMessage(message) {\n      if (!message || typeof message !== 'object') {\n        console.warn('无效的消息格式:', message);\n        return;\n      }\n      switch (message.type) {\n        case 'CONNECTED':\n          this.mainConn = true;\n          this.mapConn = true;\n          this.connError = '';\n          break;\n        case 'DISCONNECTED':\n          this.mainConn = false;\n          this.mapConn = false;\n          this.connError = '连接已断开，正在重试...';\n          break;\n        case 'ERROR':\n          this.connError = `后端错误: ${message.data}`;\n          console.error('WebSocket错误:', message.data);\n          this.mainConn = false;\n          this.mapConn = false;\n          break;\n        case 'MAIN_DATA':\n          if (typeof message.data === 'object' && message.data !== null) {\n            this.handleMainData(message.data);\n          } else {\n            console.warn('无效的主数据格式:', message.data);\n          }\n          break;\n        case 'MAP_DATA':\n          if (typeof message.data === 'object' && message.data !== null) {\n            this.handleMapData(message.data);\n          } else {\n            console.warn('无效的地图数据格式:', message.data);\n          }\n          break;\n        default:\n          console.log('未知消息类型:', message.type);\n      }\n    },\n    // 数据刷新（增加状态反馈）\n    refresh() {\n      if (this.workerPort) {\n        this.workerPort.postMessage({\n          type: 'REFRESH_DATA'\n        });\n        this.lastUpdate = '刷新中...'; // 显示刷新状态\n      } else {\n        // 当worker不可用时，直接重新初始化连接\n        this.initWorker();\n        this.lastUpdate = '重新连接中...';\n      }\n    },\n    // 处理主数据更新（增强数据校验）\n    handleMainData(data) {\n      try {\n        // 校验温度数据\n        const newTemp = parseFloat(data.T || data.tem);\n        if (!isNaN(newTemp)) {\n          this.temp = newTemp;\n          this.tempValid = true;\n        } else {\n          this.tempValid = false;\n          console.warn('无效的温度数据:', data.T || data.tem);\n        }\n\n        // 校验湿度数据\n        const newHum = parseFloat(data.H || data.hum);\n        if (!isNaN(newHum)) {\n          this.hum = newHum;\n          this.humValid = true;\n        } else {\n          this.humValid = false;\n          console.warn('无效的湿度数据:', data.H || data.hum);\n        }\n\n        // 处理水位数据\n        this.water = {\n          status: typeof data.waterStatus === 'number' ? data.waterStatus : 0,\n          value: typeof data.water_level === 'number' ? data.water_level : 0\n        };\n\n        // 校验饲料重量\n        const newWeight = parseFloat(data.weight);\n        if (!isNaN(newWeight)) {\n          this.weight = newWeight;\n          this.weightValid = true;\n        } else {\n          this.weightValid = false;\n          console.warn('无效的饲料重量数据:', data.weight);\n        }\n\n        // 更新设备状态（优化：通过key直接定位，避免find遍历）\n        this.devices.forEach(device => {\n          if (typeof data[device.key] === 'number') {\n            device.status = data[device.key];\n          }\n        });\n\n        // 更新历史数据（仅当数据有效时）\n        const timeStr = new Date().toLocaleTimeString();\n        if (this.tempValid) this.updateHistory(this.tempHistory, this.temp, timeStr);\n        if (this.humValid) this.updateHistory(this.humHistory, this.hum, timeStr);\n\n        // 更新状态信息\n        this.lastUpdate = new Date().toLocaleString();\n        this.currDate = new Date().toLocaleDateString();\n        this.renderCharts();\n        this.mainConn = true;\n      } catch (e) {\n        this.mainConn = false;\n        this.connError = `数据处理失败: ${e.message}`;\n        console.error('处理主数据失败:', e);\n      }\n    },\n    // 处理地图数据更新（增强边界校验）\n    handleMapData(data) {\n      try {\n        // 校验经纬度\n        if (data.lng !== undefined && data.lat !== undefined) {\n          const lng = parseFloat(data.lng),\n            lat = parseFloat(data.lat);\n          // 严格校验经纬度范围\n          if (!isNaN(lng) && !isNaN(lat) && lng >= -180 && lng <= 180 && lat >= -90 && lat <= 90) {\n            this.lnglat = `${lng.toFixed(6)},${lat.toFixed(6)}`;\n            // 更新标记位置（仅当map和marker已初始化）\n            if (this.marker && this.map) {\n              this.marker.setPosition([lng + 0.01, lat - 0.001]);\n              this.map.panTo([lng + 0.01, lat - 0.001], {\n                duration: 300\n              });\n            }\n          } else {\n            console.warn('经纬度超出有效范围:', lng, lat);\n          }\n        }\n\n        // 校验航向角\n        if (data.cogt !== undefined) {\n          const angle = parseFloat(data.cogt);\n          if (!isNaN(angle)) {\n            this.course = `${angle.toFixed(1)}°`;\n            if (this.marker) {\n              this.marker.setRotation((angle % 360 + 360) % 360);\n            }\n          }\n        }\n        this.mapConn = true;\n      } catch (e) {\n        this.mapConn = false;\n        console.error('处理地图数据失败:', e);\n      }\n    },\n    // 处理连接状态变化\n    handleConnectionStatus(status) {\n      this.mainConn = status;\n      this.mapConn = status;\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.initCharts();\n      this.initMap();\n      this.initWorker();\n\n      // 定期检查连接状态（每30秒）\n      this.connectionCheckTimer = setInterval(() => {\n        if (!this.mainConn) {\n          console.log('检测到连接断开，尝试重连...');\n          this.initWorker();\n        }\n      }, 30000);\n    });\n  },\n  beforeDestroy() {\n    // 清理定时器\n    clearInterval(this.connectionCheckTimer);\n\n    // 清理Worker连接\n    if (this.workerPort) {\n      this.workerPort.postMessage({\n        type: 'CLOSE'\n      }); // 告知worker关闭连接\n      this.workerPort.close();\n      this.worker = null;\n      this.workerPort = null;\n    }\n\n    // 清理图表和地图\n    if (this.tempChart) this.tempChart.dispose();\n    if (this.humChart) this.humChart.dispose();\n    if (this.map) this.map.destroy();\n  }\n};","map":{"version":3,"names":["echarts","markerIcon","name","data","weather","date","Date","getMonth","getDate","weekday","getDay","tempMin","tempMax","windDir","windForce","currDate","toLocaleDateString","temp","hum","tempValid","humValid","weightValid","tempHistory","time","value","humHistory","tempRange","min","max","humRange","worker","workerPort","connError","water","status","weight","devices","key","mainConn","lastUpdate","maxHistory","barHeight","colors","lnglat","course","mapStatus","mapConn","map","marker","amapKey","tempChart","humChart","computed","weightPercent","Math","round","tempWarn","humWarn","waterAlarm","gradientBg","join","methods","initCharts","tempDom","document","getElementById","humDom","console","error","setTimeout","init","window","addEventListener","resize","renderCharts","setOption","tooltip","trigger","grid","left","right","bottom","containLabel","xAxis","type","i","axisLabel","rotate","yAxis","markLine","lineStyle","color","series","smooth","itemStyle","areaStyle","graphic","LinearGradient","offset","updateHistory","ref","val","isNaN","warn","push","length","shift","initMap","loadMap","Promise","res","rej","AMap","script","createElement","src","onload","Error","onerror","head","appendChild","then","Map","resizeEnable","zoom","center","viewMode","checkMarkerIcon","img","Image","Marker","position","icon","Icon","size","Size","image","imageSize","imageOffset","Pixel","anchor","add","catch","err","on","message","initWorker","SharedWorker","port","onmessage","event","handleWorkerMessage","preventDefault","start","postMessage","fallbackToWebSocket","log","ws","WebSocket","onopen","JSON","parse","onclose","handleMainData","handleMapData","refresh","newTemp","parseFloat","T","tem","newHum","H","waterStatus","water_level","newWeight","forEach","device","timeStr","toLocaleTimeString","toLocaleString","e","lng","undefined","lat","toFixed","setPosition","panTo","duration","cogt","angle","setRotation","handleConnectionStatus","mounted","$nextTick","connectionCheckTimer","setInterval","beforeDestroy","clearInterval","close","dispose","destroy"],"sources":["src/views/manager/details.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard\">\r\n    <!-- 顶部信息栏 -->\r\n    <header class=\"top-bar\">\r\n      <div class=\"title-section\">\r\n        <h1>养殖场环境监控系统</h1>\r\n        <div class=\"weather-info\">\r\n          <span>{{ weather.date }} {{ weather.weekday }}</span>\r\n          <span>{{ weather.weather }}</span>\r\n          <span>{{ weather.tempMin }}°~{{ weather.tempMax }}°</span>\r\n          <span>{{ weather.windDir }} {{ weather.windForce }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"status-info\">\r\n        <div class=\"conn-status\">\r\n          <span class=\"dot\" :class=\"{ green: mainConn }\"></span>\r\n          <span>{{ mainConn ? '连接正常' : '连接断开' }}</span>\r\n          <!-- 新增错误提示 -->\r\n          <span class=\"error-tip\" v-if=\"connError\">{{ connError }}</span>\r\n        </div>\r\n        <span>{{ currDate }}</span>\r\n      </div>\r\n    </header>\r\n\r\n    <!-- 核心内容区 -->\r\n    <main class=\"main-content\">\r\n      <!-- 环境状态指标 -->\r\n      <section class=\"status-cards\">\r\n        <h2>环境跟踪</h2>\r\n        <div class=\"cards\">\r\n          <div class=\"card\" :class=\"{ warn: tempWarn }\">\r\n            <div>当前温度</div>\r\n            <div class=\"val\">{{ tempValid ? temp.toFixed(1) + '°C' : '无数据' }}</div>\r\n          </div>\r\n          <div class=\"card\" :class=\"{ warn: humWarn }\">\r\n            <div>当前湿度</div>\r\n            <div class=\"val\">{{ humValid ? hum.toFixed(1) + '%' : '无数据' }}</div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <!-- 趋势图表 -->\r\n      <section class=\"charts\">\r\n        <h2>环境趋势</h2>\r\n        <div class=\"charts-grid\">\r\n          <div class=\"chart-box\">\r\n            <div>温度历史数据</div>\r\n            <div id=\"tempChart\" class=\"chart\"></div>\r\n          </div>\r\n          <div class=\"chart-box\">\r\n            <div>湿度历史数据</div>\r\n            <div id=\"humChart\" class=\"chart\"></div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <!-- 设备与状态 -->\r\n      <section class=\"device-info\">\r\n        <h2>设备与状态信息</h2>\r\n        <div class=\"info-grid\">\r\n          <div class=\"device-grid\">\r\n            <!-- 水位状态 -->\r\n            <div class=\"card\" :class=\"{ warn: waterAlarm }\">\r\n              <div>水位状态</div>\r\n              <span class=\"status\" :class=\"{ on: water.status === 1 }\">\r\n                {{ water.status === 1 ? '正常' : '有误' }}\r\n              </span>\r\n            </div>\r\n            \r\n            <!-- 饲料重量 -->\r\n            <div class=\"card feed-card\">\r\n              <div>饲料重量状态值</div>\r\n              <div class=\"progress-container\">\r\n                <div class=\"progress-bar\" :style=\"{ height: barHeight + 'px' }\">\r\n                  <div \r\n                    class=\"progress-fill\" \r\n                    :class=\"{ low: weightPercent < 20 }\"\r\n                    :style=\"{ \r\n                      height: weightPercent + '%',\r\n                      background: gradientBg \r\n                    }\"\r\n                  ></div>\r\n                  <div \r\n                    class=\"progress-marker\"\r\n                    :style=\"{ bottom: weightPercent + '%' }\"\r\n                  ></div>\r\n                </div>\r\n                <div class=\"weight-info\">\r\n                  <span>{{ weightValid ? weight.toFixed(1) + 'g' : '无数据' }}</span>\r\n                  <span>{{ weightPercent }}%</span>\r\n                  <span v-if=\"weightPercent < 20\" class=\"low-warning\">\r\n                    饲料不足，请补充!\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <!-- 设备状态卡片（保持不变） -->\r\n            <div class=\"card device-card\">\r\n              <div class=\"icon\">💧</div>\r\n              <div>水泵状态</div>\r\n              <span class=\"status\" :class=\"{ on: devices[0].status === 1 }\">\r\n                {{ devices[0].status === 1 ? '运行中' : '已关闭' }}\r\n              </span>\r\n            </div>\r\n            <div class=\"card device-card\">\r\n              <div class=\"icon\">🔊</div>\r\n              <div>电机状态</div>\r\n              <span class=\"status\" :class=\"{ on: devices[1].status === 1 }\">\r\n                {{ devices[1].status === 1 ? '运行中' : '已关闭' }}\r\n              </span>\r\n            </div>\r\n            <div class=\"card device-card\">\r\n              <div class=\"icon\">💡</div>\r\n              <div>灯光状态</div>\r\n              <span class=\"status\" :class=\"{ on: devices[2].status === 1 }\">\r\n                {{ devices[2].status === 1 ? '运行中' : '已关闭' }}\r\n              </span>\r\n            </div>\r\n            <div class=\"card device-card\">\r\n              <div class=\"icon\">🚪</div>\r\n              <div>阀门状态</div>\r\n              <span class=\"status\" :class=\"{ on: devices[3].status === 1 }\">\r\n                {{ devices[3].status === 1 ? '运行中' : '已关闭' }}\r\n              </span>\r\n            </div>\r\n            <div class=\"card device-card\">\r\n              <div class=\"icon\">🔥</div>\r\n              <div>加热状态</div>\r\n              <span class=\"status\" :class=\"{ on: devices[4].status === 1 }\">\r\n                {{ devices[4].status === 1 ? '运行中' : '已关闭' }}\r\n              </span>\r\n            </div>\r\n            <div class=\"card device-card\">\r\n              <div class=\"icon\">💨</div>\r\n              <div>风机状态</div>\r\n              <span class=\"status\" :class=\"{ on: devices[5].status === 1 }\">\r\n                {{ devices[5].status === 1 ? '运行中' : '已关闭' }}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <!-- 地图区域 -->\r\n      <section class=\"map-section\">\r\n        <h2>位置监控</h2>\r\n        <div class=\"map-container\">\r\n          <div id=\"map\" class=\"map-view\"></div>\r\n          <div class=\"map-status\">\r\n            <span>地图后端连接: </span>\r\n            <span :class=\"{ online: mapConn }\">{{ mapConn ? '已连接' : '已断开' }}</span>\r\n            <span class=\"map-dot\" :class=\"{ green: mapConn }\"></span>\r\n          </div>\r\n          <div class=\"map-data\">\r\n            <div><span>经纬度:</span> <span>{{ lnglat || '等待数据...' }}</span></div>\r\n            <div><span>航向角:</span> <span>{{ course || '0°' }}</span></div>\r\n            <div><span>地图状态:</span> <span>{{ mapStatus }}</span></div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </main>\r\n\r\n    <footer class=\"footer\">\r\n      <div>最后更新时间: {{ lastUpdate || '未更新' }}</div>\r\n      <button class=\"refresh\" @click=\"refresh\">\r\n        <i class=\"fa fa-refresh\"></i> 刷新数据\r\n      </button>\r\n    </footer>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts'\r\n// 确保图片路径正确（避免404错误）\r\nimport markerIcon from '@/assets/imgs/icons8-圈向上-64.png'\r\n\r\nexport default {\r\n  name: 'FarmMonitor',\r\n  data() {\r\n    return {\r\n      // 核心数据\r\n      weather: {\r\n        date: `${new Date().getMonth() + 1}月${new Date().getDate()}日`,\r\n        weekday: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'][new Date().getDay()],\r\n        weather: '晴',\r\n        tempMin: 18,\r\n        tempMax: 30,\r\n        windDir: '东风',\r\n        windForce: '3级'\r\n      },\r\n      currDate: new Date().toLocaleDateString(),\r\n      temp: 22,\r\n      hum: 50,\r\n      // 新增：标记数据是否有效\r\n      tempValid: false,\r\n      humValid: false,\r\n      weightValid: false,\r\n      tempHistory: [{ time: '00:00', value: 22 }, { time: '00:05', value: 22.5 }],\r\n      humHistory: [{ time: '00:00', value: 50 }, { time: '00:05', value: 49.5 }],\r\n      tempRange: { min: 18, max: 26 },\r\n      humRange: { min: 40, max: 60 },\r\n\r\n      // WebSocket和Worker相关状态\r\n      worker: null,\r\n      workerPort: null,\r\n      connError: '', // 连接错误信息\r\n\r\n      // 设备数据\r\n      water: { status: 0, value: 0 },\r\n      weight: 50,\r\n      // 优化：用对象映射设备状态，避免频繁find遍历\r\n      devices: [\r\n        { name: '水泵', status: 0, key: 'pump' },\r\n        { name: '电机', status: 0, key: 'motor' },\r\n        { name: '灯光', status: 0, key: 'light' },\r\n        { name: '阀门', status: 0, key: 'door' },\r\n        { name: '加热', status: 0, key: 'heat' },\r\n        { name: '风机', status: 0, key: 'fan' }\r\n      ],\r\n\r\n      // 连接状态\r\n      mainConn: false,\r\n      lastUpdate: '-',\r\n      maxHistory: 10,\r\n\r\n      // 进度条相关配置\r\n      barHeight: 120,\r\n      colors: ['#43a047', '#8bc34a', '#cddc39'],\r\n\r\n      // 地图相关（替换为你的高德Key）\r\n      lnglat: '',\r\n      course: '',\r\n      mapStatus: '地图加载中...',\r\n      mapConn: false,\r\n      map: null,\r\n      marker: null,\r\n      amapKey: '你的高德地图Key', // 必须替换为实际有效的Key\r\n\r\n      // 图表实例\r\n      tempChart: null,\r\n      humChart: null\r\n    }\r\n  },\r\n  computed: {\r\n    weightPercent() {\r\n      return Math.max(0, Math.min(100, Math.round(this.weight)))\r\n    },\r\n    tempWarn() {\r\n      return this.tempValid && (this.temp < this.tempRange.min || this.temp > this.tempRange.max)\r\n    },\r\n    humWarn() {\r\n      return this.humValid && (this.hum < this.humRange.min || this.hum > this.humRange.max)\r\n    },\r\n    waterAlarm() {\r\n      return this.water.value > 8.5 || this.water.value < 2.0\r\n    },\r\n    gradientBg() {\r\n      return `linear-gradient(to top, ${this.colors.join(', ')})`\r\n    }\r\n  },\r\n  methods: {\r\n    // 图表初始化与渲染（增强DOM检查）\r\n    initCharts() {\r\n      const tempDom = document.getElementById('tempChart')\r\n      const humDom = document.getElementById('humChart')\r\n      if (!tempDom || !humDom) {\r\n        console.error('图表DOM元素不存在，重试初始化...')\r\n        // 1秒后重试（避免DOM未加载完成）\r\n        setTimeout(() => this.initCharts(), 1000)\r\n        return\r\n      }\r\n\r\n      this.tempChart = echarts.init(tempDom)\r\n      this.humChart = echarts.init(humDom)\r\n      \r\n      window.addEventListener('resize', () => {\r\n        this.tempChart?.resize()\r\n        this.humChart?.resize()\r\n      })\r\n      this.renderCharts()\r\n    },\r\n    renderCharts() {\r\n      if (!this.tempChart || !this.humChart) return // 避免未初始化时调用\r\n\r\n      // 温度图表配置（保持不变）\r\n      this.tempChart.setOption({\r\n        tooltip: { trigger: 'axis' },\r\n        grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true },\r\n        xAxis: { \r\n          type: 'category', \r\n          data: this.tempHistory.map(i => i.time),\r\n          axisLabel: { rotate: 30 } \r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          name: '温度(°C)',\r\n          min: Math.min(...this.tempHistory.map(i => i.value), this.tempRange.min) - 2,\r\n          max: Math.max(...this.tempHistory.map(i => i.value), this.tempRange.max) + 2,\r\n          markLine: {\r\n            data: [\r\n              { yAxis: this.tempRange.min, name: '最低阈值', lineStyle: { color: 'red' } },\r\n              { yAxis: this.tempRange.max, name: '最高阈值', lineStyle: { color: 'red' } }\r\n            ]\r\n          }\r\n        },\r\n        series: [{\r\n          name: '温度',\r\n          type: 'line',\r\n          data: this.tempHistory.map(i => i.value),\r\n          smooth: true,\r\n          lineStyle: { color: '#e74c3c' },\r\n          itemStyle: { color: '#e74c3c' },\r\n          areaStyle: { color: new echarts.graphic.LinearGradient(0,0,0,1,[\r\n            { offset: 0, color: 'rgba(231,76,60,0.3)' },\r\n            { offset: 1, color: 'rgba(231,76,60,0)' }\r\n          ])}\r\n        }]\r\n      })\r\n\r\n      // 湿度图表配置（保持不变）\r\n      this.humChart.setOption({\r\n        tooltip: { trigger: 'axis' },\r\n        grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true },\r\n        xAxis: { type: 'category', data: this.humHistory.map(i => i.time), axisLabel: { rotate: 30 } },\r\n        yAxis: {\r\n          type: 'value',\r\n          name: '湿度(%)',\r\n          min: Math.min(...this.humHistory.map(i => i.value), this.humRange.min) - 5,\r\n          max: Math.max(...this.humHistory.map(i => i.value), this.humRange.max) + 5,\r\n          markLine: {\r\n            data: [\r\n              { yAxis: this.humRange.min, name: '最低阈值', lineStyle: { color: 'blue' } },\r\n              { yAxis: this.humRange.max, name: '最高阈值', lineStyle: { color: 'blue' } }\r\n            ]\r\n          }\r\n        },\r\n        series: [{\r\n          name: '湿度',\r\n          type: 'line',\r\n          data: this.humHistory.map(i => i.value),\r\n          smooth: true,\r\n          lineStyle: { color: '#3498db' },\r\n          itemStyle: { color: '#3498db' },\r\n          areaStyle: { color: new echarts.graphic.LinearGradient(0,0,0,1,[\r\n            { offset: 0, color: 'rgba(52,152,219,0.3)' },\r\n            { offset: 1, color: 'rgba(52,152,219,0)' }\r\n          ])}\r\n        }]\r\n      })\r\n    },\r\n\r\n    // 历史数据更新（增加数据有效性判断）\r\n    updateHistory(ref, val, time) {\r\n      if (typeof val !== 'number' || isNaN(val)) {\r\n        console.warn('无效的历史数据，跳过更新')\r\n        return\r\n      }\r\n      ref.push({ time, value: val })\r\n      if (ref.length > this.maxHistory) ref.shift()\r\n    },\r\n\r\n    // 地图初始化（修复Key问题和加载错误处理）\r\n    initMap() {\r\n      if (!this.amapKey || this.amapKey === '你的高德地图Key') {\r\n        this.mapStatus = '请配置有效的高德地图Key'\r\n        console.error('未配置高德地图Key，地图无法加载')\r\n        return\r\n      }\r\n\r\n      const loadMap = () => new Promise((res, rej) => {\r\n        if (window.AMap) return res(window.AMap)\r\n        const script = document.createElement('script')\r\n        script.src = `https://webapi.amap.com/maps?v=1.4.15&key=${this.amapKey}` // 使用配置的Key\r\n        script.onload = () => {\r\n          if (window.AMap) res(window.AMap)\r\n          else rej(new Error('地图加载失败：未找到AMap对象'))\r\n        }\r\n        script.onerror = () => rej(new Error('地图脚本加载失败（可能是Key无效或网络问题）'))\r\n        document.head.appendChild(script)\r\n      })\r\n\r\n      loadMap().then(AMap => {\r\n        this.map = new AMap.Map('map', {\r\n          resizeEnable: true,\r\n          zoom: 16,\r\n          center: [116.397470, 39.908823],\r\n          viewMode: '2D'\r\n        })\r\n        \r\n        // 检查图片是否加载成功（避免marker图标404）\r\n        const checkMarkerIcon = () => new Promise((res, rej) => {\r\n          const img = new Image()\r\n          img.src = markerIcon\r\n          img.onload = () => res()\r\n          img.onerror = () => rej(new Error('标记图标加载失败，请检查路径'))\r\n        })\r\n\r\n        checkMarkerIcon().then(() => {\r\n          this.marker = new AMap.Marker({\r\n            position: [116.397470, 39.908823],\r\n            icon: new AMap.Icon({\r\n              size: new AMap.Size(32, 32),\r\n              image: markerIcon,\r\n              imageSize: new AMap.Size(64, 64),\r\n              imageOffset: new AMap.Pixel(-16, -16)\r\n            }),\r\n            anchor: 'center'\r\n          })\r\n          this.map.add(this.marker)\r\n        }).catch(err => {\r\n          console.error(err)\r\n          this.mapStatus += '（标记图标加载失败）'\r\n        })\r\n        \r\n        this.map.on('complete', () => this.mapStatus = '地图已就绪')\r\n        this.map.on('error', (err) => this.mapStatus = `地图错误：${err.message}`)\r\n      }).catch(err => {\r\n        this.mapStatus = `地图加载失败：${err.message}`\r\n        console.error(err)\r\n      })\r\n    },\r\n\r\n    // 初始化SharedWorker（修复路径问题和错误处理）\r\n    initWorker() {\r\n      if (!window.SharedWorker) {\r\n        this.connError = '浏览器不支持SharedWorker'\r\n        console.error('当前浏览器不支持SharedWorker，无法建立连接')\r\n        return\r\n      }\r\n\r\n      try {\r\n        // 修复：根据实际项目结构调整worker路径（例如放在public目录下）\r\n        // 如果worker文件在src/workers目录，需配置webpack处理或移动到public\r\n        this.worker = new SharedWorker('/workers/websocket-shared-worker.js'); // 推荐路径\r\n        this.workerPort = this.worker.port;\r\n\r\n        // 监听Worker消息\r\n        this.workerPort.onmessage = (event) => {\r\n          this.handleWorkerMessage(event.data);\r\n        };\r\n\r\n        // 监听错误（更详细的错误信息）\r\n        this.workerPort.onerror = (error) => {\r\n          this.connError = `Worker错误: ${error.message}`\r\n          console.error('Worker错误:', error);\r\n          this.mainConn = false;\r\n          this.mapConn = false;\r\n          error.preventDefault(); // 阻止默认错误冒泡\r\n        };\r\n\r\n        // 启动连接并发送初始化指令\r\n        this.workerPort.start();\r\n        this.workerPort.postMessage({ type: 'INIT' }); // 告知worker初始化连接\r\n      } catch (error) {\r\n        this.connError = `Worker初始化失败: ${error.message}`\r\n        console.error('初始化SharedWorker失败:', error);\r\n        // 尝试降级方案：直接使用WebSocket（如果worker不可用）\r\n        this.fallbackToWebSocket();\r\n      }\r\n    },\r\n\r\n    // 降级方案：直接使用WebSocket（当SharedWorker失败时）\r\n    fallbackToWebSocket() {\r\n      console.log('尝试使用WebSocket降级方案...')\r\n      const ws = new WebSocket('ws://你的后端WebSocket地址'); // 替换为实际地址\r\n      \r\n      ws.onopen = () => {\r\n        this.mainConn = true;\r\n        this.mapConn = true;\r\n        this.connError = '';\r\n      };\r\n      \r\n      ws.onmessage = (event) => {\r\n        const data = JSON.parse(event.data);\r\n        this.handleWorkerMessage(data); // 复用消息处理逻辑\r\n      };\r\n      \r\n      ws.onclose = () => {\r\n        this.mainConn = false;\r\n        this.mapConn = false;\r\n        this.connError = 'WebSocket连接已关闭';\r\n      };\r\n      \r\n      ws.onerror = (error) => {\r\n        this.connError = `WebSocket错误: ${error.message}`;\r\n        console.error('WebSocket错误:', error);\r\n      };\r\n    },\r\n\r\n    // 处理Worker消息（增强数据校验）\r\n    handleWorkerMessage(message) {\r\n      if (!message || typeof message !== 'object') {\r\n        console.warn('无效的消息格式:', message);\r\n        return;\r\n      }\r\n\r\n      switch (message.type) {\r\n        case 'CONNECTED':\r\n          this.mainConn = true;\r\n          this.mapConn = true;\r\n          this.connError = '';\r\n          break;\r\n        case 'DISCONNECTED':\r\n          this.mainConn = false;\r\n          this.mapConn = false;\r\n          this.connError = '连接已断开，正在重试...';\r\n          break;\r\n        case 'ERROR':\r\n          this.connError = `后端错误: ${message.data}`;\r\n          console.error('WebSocket错误:', message.data);\r\n          this.mainConn = false;\r\n          this.mapConn = false;\r\n          break;\r\n        case 'MAIN_DATA':\r\n          if (typeof message.data === 'object' && message.data !== null) {\r\n            this.handleMainData(message.data);\r\n          } else {\r\n            console.warn('无效的主数据格式:', message.data);\r\n          }\r\n          break;\r\n        case 'MAP_DATA':\r\n          if (typeof message.data === 'object' && message.data !== null) {\r\n            this.handleMapData(message.data);\r\n          } else {\r\n            console.warn('无效的地图数据格式:', message.data);\r\n          }\r\n          break;\r\n        default:\r\n          console.log('未知消息类型:', message.type);\r\n      }\r\n    },\r\n\r\n    // 数据刷新（增加状态反馈）\r\n    refresh() {\r\n      if (this.workerPort) {\r\n        this.workerPort.postMessage({ type: 'REFRESH_DATA' });\r\n        this.lastUpdate = '刷新中...'; // 显示刷新状态\r\n      } else {\r\n        // 当worker不可用时，直接重新初始化连接\r\n        this.initWorker();\r\n        this.lastUpdate = '重新连接中...';\r\n      }\r\n    },\r\n\r\n    // 处理主数据更新（增强数据校验）\r\n    handleMainData(data) {\r\n      try {\r\n        // 校验温度数据\r\n        const newTemp = parseFloat(data.T || data.tem);\r\n        if (!isNaN(newTemp)) {\r\n          this.temp = newTemp;\r\n          this.tempValid = true;\r\n        } else {\r\n          this.tempValid = false;\r\n          console.warn('无效的温度数据:', data.T || data.tem);\r\n        }\r\n\r\n        // 校验湿度数据\r\n        const newHum = parseFloat(data.H || data.hum);\r\n        if (!isNaN(newHum)) {\r\n          this.hum = newHum;\r\n          this.humValid = true;\r\n        } else {\r\n          this.humValid = false;\r\n          console.warn('无效的湿度数据:', data.H || data.hum);\r\n        }\r\n\r\n        // 处理水位数据\r\n        this.water = {\r\n          status: typeof data.waterStatus === 'number' ? data.waterStatus : 0,\r\n          value: typeof data.water_level === 'number' ? data.water_level : 0\r\n        };\r\n\r\n        // 校验饲料重量\r\n        const newWeight = parseFloat(data.weight);\r\n        if (!isNaN(newWeight)) {\r\n          this.weight = newWeight;\r\n          this.weightValid = true;\r\n        } else {\r\n          this.weightValid = false;\r\n          console.warn('无效的饲料重量数据:', data.weight);\r\n        }\r\n\r\n        // 更新设备状态（优化：通过key直接定位，避免find遍历）\r\n        this.devices.forEach(device => {\r\n          if (typeof data[device.key] === 'number') {\r\n            device.status = data[device.key];\r\n          }\r\n        });\r\n\r\n        // 更新历史数据（仅当数据有效时）\r\n        const timeStr = new Date().toLocaleTimeString();\r\n        if (this.tempValid) this.updateHistory(this.tempHistory, this.temp, timeStr);\r\n        if (this.humValid) this.updateHistory(this.humHistory, this.hum, timeStr);\r\n\r\n        // 更新状态信息\r\n        this.lastUpdate = new Date().toLocaleString();\r\n        this.currDate = new Date().toLocaleDateString();\r\n        this.renderCharts();\r\n        this.mainConn = true;\r\n      } catch (e) {\r\n        this.mainConn = false;\r\n        this.connError = `数据处理失败: ${e.message}`;\r\n        console.error('处理主数据失败:', e);\r\n      }\r\n    },\r\n\r\n    // 处理地图数据更新（增强边界校验）\r\n    handleMapData(data) {\r\n      try {\r\n        // 校验经纬度\r\n        if (data.lng !== undefined && data.lat !== undefined) {\r\n          const lng = parseFloat(data.lng), lat = parseFloat(data.lat);\r\n          // 严格校验经纬度范围\r\n          if (!isNaN(lng) && !isNaN(lat) && \r\n              lng >= -180 && lng <= 180 && \r\n              lat >= -90 && lat <= 90) {\r\n            this.lnglat = `${lng.toFixed(6)},${lat.toFixed(6)}`;\r\n            // 更新标记位置（仅当map和marker已初始化）\r\n            if (this.marker && this.map) {\r\n              this.marker.setPosition([lng + 0.01, lat - 0.001]);\r\n              this.map.panTo([lng + 0.01, lat - 0.001], { duration: 300 });\r\n            }\r\n          } else {\r\n            console.warn('经纬度超出有效范围:', lng, lat);\r\n          }\r\n        }\r\n\r\n        // 校验航向角\r\n        if (data.cogt !== undefined) {\r\n          const angle = parseFloat(data.cogt);\r\n          if (!isNaN(angle)) {\r\n            this.course = `${angle.toFixed(1)}°`;\r\n            if (this.marker) {\r\n              this.marker.setRotation(((angle % 360) + 360) % 360);\r\n            }\r\n          }\r\n        }\r\n\r\n        this.mapConn = true;\r\n      } catch (e) {\r\n        this.mapConn = false;\r\n        console.error('处理地图数据失败:', e);\r\n      }\r\n    },\r\n\r\n    // 处理连接状态变化\r\n    handleConnectionStatus(status) {\r\n      this.mainConn = status;\r\n      this.mapConn = status;\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      this.initCharts();\r\n      this.initMap();\r\n      this.initWorker();\r\n\r\n      // 定期检查连接状态（每30秒）\r\n      this.connectionCheckTimer = setInterval(() => {\r\n        if (!this.mainConn) {\r\n          console.log('检测到连接断开，尝试重连...');\r\n          this.initWorker();\r\n        }\r\n      }, 30000);\r\n    });\r\n  },\r\n  beforeDestroy() {\r\n    // 清理定时器\r\n    clearInterval(this.connectionCheckTimer);\r\n\r\n    // 清理Worker连接\r\n    if (this.workerPort) {\r\n      this.workerPort.postMessage({ type: 'CLOSE' }); // 告知worker关闭连接\r\n      this.workerPort.close();\r\n      this.worker = null;\r\n      this.workerPort = null;\r\n    }\r\n\r\n    // 清理图表和地图\r\n    if (this.tempChart) this.tempChart.dispose();\r\n    if (this.humChart) this.humChart.dispose();\r\n    if (this.map) this.map.destroy();\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* 样式保持不变 */\r\n* { margin: 0; padding: 0; box-sizing: border-box; }\r\n.dashboard { font-family: 'Microsoft YaHei', sans-serif; display: flex; flex-direction: column; background: #f5f7fa; min-height: 100vh; }\r\n\r\n/* 顶部栏 */\r\n.top-bar { display: flex; justify-content: space-between; align-items: center; padding: 1rem 2rem; background: #2c3e50; color: #fff; box-shadow: 0 2px 4px rgba(0,0,0,0.1); flex-wrap: wrap; gap: 1rem; }\r\n.weather-info { display: flex; gap: 1.5rem; font-size: 0.9rem; color: #e0e0e0; }\r\n.conn-status { display: flex; align-items: center; gap: 0.5rem; }\r\n.dot { display: inline-block; width: 10px; height: 10px; border-radius: 50%; background: #e74c3c; }\r\n.dot.green { background: #27ae60; }\r\n.currDate { font-size: 0.9rem; }\r\n\r\n/* 主内容区 */\r\n.main-content { flex: 1; padding: 1.5rem 2rem; display: flex; flex-direction: column; gap: 2rem; overflow-y: auto; }\r\nh2 { font-size: 1.2rem; color: #2c3e50; margin-bottom: 1rem; padding-bottom: 0.5rem; border-bottom: 1px solid #e0e0e0; }\r\n\r\n/* 状态卡片 */\r\n.status-cards .cards { display: grid; grid-template-columns: repeat(2, 1fr); gap: 1rem; height: 140px; }\r\n.card { background: #fff; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); padding: 1rem; display: flex; flex-direction: column; justify-content: center; gap: 0.5rem; }\r\n.card.warn { border-left: 4px solid #e74c3c; }\r\n.card .val { font-size: 1.8rem; font-weight: bold; color: #2c3e50; }\r\n\r\n/* 图表区域 */\r\n.charts .charts-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 1.5rem; height: 400px; }\r\n.chart-box .chart { width: 100%; height: 100%; min-height: 250px; }\r\n\r\n\r\n.device-info .info-grid {\r\n  height: auto;\r\n  padding: 1rem;\r\n  background: #fff;\r\n  border-radius: 6px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n}\r\n\r\n.device-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));\r\n  gap: 1.2rem;\r\n}\r\n\r\n/* 设备卡片通用样式 */\r\n.device-grid .card {\r\n  height: 100%;\r\n  left: 30%;\r\n  min-height: 120px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  padding: 1rem;\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.device-grid .card:hover {\r\n  transform: translateY(-3px);\r\n  box-shadow: 0 4px 8px rgba(0,0,0,0.15);\r\n}\r\n\r\n/* 设备图标样式 */\r\n.device-card .icon {\r\n  font-size: 1.8rem;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n/* 饲料卡片特殊调整 */\r\n.feed-card {\r\n  grid-column: span 2;\r\n  min-height: 160px;\r\n}\r\n\r\n/* 响应式调整 */\r\n@media (max-width: 768px) {\r\n  .device-grid {\r\n    grid-template-columns: 1fr 1fr;\r\n  }\r\n  \r\n  .feed-card {\r\n    grid-column: span 2;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .device-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .feed-card {\r\n    grid-column: span 1;\r\n  }\r\n}\r\n\r\n/* 饲料重量进度条样式 */\r\n.feed-card .progress-container { display: flex; align-items: center; gap: 1rem; justify-content: center; flex: 1; }\r\n.progress-bar {\r\n  width: 60px;\r\n  border: 2px solid #e0e0e0;\r\n  border-radius: 10px;\r\n  position: relative;\r\n  background-color: #f5f5f5;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1) inset;\r\n}\r\n.progress-fill {\r\n  width: 100%;\r\n  position: absolute;\r\n  bottom: 0;\r\n  transition: height 0.8s ease;\r\n  border-radius: 8px;\r\n}\r\n.progress-marker {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 3px;\r\n  background-color: #333;\r\n  transform: translateY(50%);\r\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);\r\n}\r\n.progress-fill.low { \r\n  background: linear-gradient(to top, #e74c3c, #ff5252) !important;\r\n  animation: pulse 1.5s infinite; \r\n}\r\n.weight-info { \r\n  display: flex; \r\n  flex-direction: column; \r\n  gap: 0.5rem; \r\n  align-items: center; \r\n}\r\n.weight-info span {\r\n  font-weight: 500;\r\n}\r\n.low-warning {\r\n  color: #e74c3c;\r\n  font-size: 0.8rem;\r\n  font-weight: bold;\r\n  animation: shake 1s infinite;\r\n}\r\n\r\n/* 设备列表 */\r\n.device-list { display: flex; flex-direction: column; gap: 0.8rem; }\r\n.device-item { padding: 0.6rem 0.8rem; border-radius: 4px; background: #fafafa; font-size: 0.9rem; display: flex; align-items: center; gap: 0.8rem; }\r\n.icon { font-size: 1.1rem; }\r\n.status { font-weight: 500; }\r\n.status.on { color: #27ae60; }\r\n\r\n/* 地图区域 */\r\n.map-container { width: 100%; height: 600px; position: relative; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); overflow: hidden; }\r\n.map-view { width: 100%; height: 100%; }\r\n.map-status { position: absolute; top: 15px; right: 15px; background: rgba(255,255,255,0.9); padding: 0.5rem 1rem; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); font-size: 0.85rem; }\r\n.map-dot { display: inline-block; width: 8px; height: 8px; border-radius: 50%; background: #e74c3c; margin-left: 5px; }\r\n.map-dot.green { background: #27ae60; }\r\n.map-data { position: absolute; bottom: 15px; left: 15px; background: rgba(255,255,255,0.9); padding: 0.8rem; border-radius: 6px; box-shadow: 0 2px 8px rgba(0,0,0,0.15); font-size: 0.9rem; display: flex; gap: 1.5rem; }\r\n.map-data > div { display: flex; gap: 0.5rem; }\r\n\r\n/* 底部区域 */\r\n.footer { height: 50px; display: flex; justify-content: space-between; align-items: center; padding: 0 2rem; background: #2c3e50; color: #fff; font-size: 0.9rem; }\r\n.refresh { background: #3498db; color: #fff; border: none; border-radius: 4px; padding: 0.4rem 0.8rem; display: flex; align-items: center; gap: 0.5rem; cursor: pointer; }\r\n.refresh:hover { background: #2980b9; }\r\n\r\n/* 响应式 */\r\n@media (max-width: 768px) {\r\n  .charts-grid { grid-template-columns: 1fr; height: auto; gap: 1rem; }\r\n  .chart-box { height: 400px; }\r\n  .info-grid { flex-direction: column; height: auto; gap: 1rem; }\r\n  .status-group, .device-list { height: auto; min-height: 300px; }\r\n  .map-container { height: 400px; }\r\n}\r\n\r\n/* 动画效果 */\r\n@keyframes pulse { \r\n  0% { opacity: 1; } \r\n  50% { opacity: 0.6; } \r\n  100% { opacity: 1; } \r\n}\r\n\r\n@keyframes shake {\r\n  0%, 100% { transform: translateX(0); }\r\n  25% { transform: translateX(-3px); }\r\n  75% { transform: translateX(3px); }\r\n}\r\n.error-tip {\r\n  color: #e74c3c;\r\n  font-size: 0.8rem;\r\n  margin-left: 10px;\r\n}\r\n.status.on { color: #27ae60; }\r\n.status.off { color: #e74c3c; }\r\n.map-status .online { color: #27ae60; }\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}