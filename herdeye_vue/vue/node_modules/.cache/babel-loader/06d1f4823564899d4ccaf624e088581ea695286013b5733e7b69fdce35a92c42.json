{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport * as echarts from 'echarts';\nimport markerIcon from '@/assets/imgs/icons8-圈向上-64.png';\nexport default {\n  name: 'FarmMonitor',\n  data() {\n    return {\n      // 核心数据\n      weather: {\n        date: `${new Date().getMonth() + 1}月${new Date().getDate()}日`,\n        weekday: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'][new Date().getDay()],\n        weather: '晴',\n        tempMin: 18,\n        tempMax: 30,\n        windDir: '东风',\n        windForce: '3级'\n      },\n      currDate: new Date().toLocaleDateString(),\n      loading: true,\n      // 添加加载状态\n      temp: null,\n      hum: null,\n      tempHistory: [{\n        time: '00:00',\n        value: 22\n      }, {\n        time: '00:05',\n        value: 22.5\n      }],\n      humHistory: [{\n        time: '00:00',\n        value: 50\n      }, {\n        time: '00:05',\n        value: 49.5\n      }],\n      tempRange: {\n        min: 18,\n        max: 26\n      },\n      humRange: {\n        min: 40,\n        max: 60\n      },\n      // WebSocket配置\n      mainWs: null,\n      backendUrl: 'ws://8.152.103.136:9090/ws/data',\n      // 设备数据\n      water: {\n        status: 0,\n        value: 0\n      },\n      weight: 50,\n      devices: [{\n        name: '水泵',\n        status: 0\n      }, {\n        name: '电机',\n        status: 0\n      }, {\n        name: '灯光',\n        status: 0\n      }, {\n        name: '阀门',\n        status: 0\n      }, {\n        name: '加热',\n        status: 0\n      }, {\n        name: '风机',\n        status: 0\n      }],\n      // 连接与配置状态\n      mainConn: false,\n      mapConn: false,\n      lastUpdate: '-',\n      maxHistory: 10,\n      barHeight: 120,\n      colors: ['#43a047', '#8bc34a', '#cddc39'],\n      weightPercent: 0,\n      tempWarn: false,\n      humWarn: false,\n      waterAlarm: false,\n      gradientBg: 'linear-gradient(to top, #43a047, #8bc34a, #cddc39)',\n      // 地图相关\n      lng1: 1,\n      lat1: 1,\n      lnglat: [1, 1],\n      course: 1,\n      mapStatus: '地图加载中...',\n      map: null,\n      marker: null,\n      // 图表实例\n      tempChart: null,\n      humChart: null\n    };\n  },\n  computed: {},\n  methods: {\n    // 图表初始化与渲染\n    initCharts() {\n      const tempDom = document.getElementById('tempChart');\n      const humDom = document.getElementById('humChart');\n      if (!tempDom || !humDom) return;\n      this.tempChart = echarts.init(tempDom);\n      this.humChart = echarts.init(humDom);\n      window.addEventListener('resize', () => {\n        this.tempChart?.resize();\n        this.humChart?.resize();\n      });\n      this.renderCharts();\n    },\n    renderCharts() {\n      // 温度图表配置\n      this.tempChart.setOption({\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: {\n          type: 'category',\n          data: this.tempHistory.map(i => i.time),\n          axisLabel: {\n            rotate: 30\n          }\n        },\n        yAxis: {\n          type: 'value',\n          name: '温度(°C)',\n          min: Math.min(...this.tempHistory.map(i => i.value), this.tempRange.min) - 2,\n          max: Math.max(...this.tempHistory.map(i => i.value), this.tempRange.max) + 2,\n          markLine: {\n            data: [{\n              yAxis: this.tempRange.min,\n              name: '最低阈值',\n              lineStyle: {\n                color: 'red'\n              }\n            }, {\n              yAxis: this.tempRange.max,\n              name: '最高阈值',\n              lineStyle: {\n                color: 'red'\n              }\n            }]\n          }\n        },\n        series: [{\n          name: '温度',\n          type: 'line',\n          data: this.tempHistory.map(i => i.value),\n          smooth: true,\n          lineStyle: {\n            color: '#e74c3c'\n          },\n          itemStyle: {\n            color: '#e74c3c'\n          },\n          areaStyle: {\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: 'rgba(231,76,60,0.3)'\n            }, {\n              offset: 1,\n              color: 'rgba(231,76,60,0)'\n            }])\n          }\n        }]\n      });\n\n      // 湿度图表配置\n      this.humChart.setOption({\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: {\n          type: 'category',\n          data: this.humHistory.map(i => i.time),\n          axisLabel: {\n            rotate: 30\n          }\n        },\n        yAxis: {\n          type: 'value',\n          name: '湿度(%)',\n          min: Math.min(...this.humHistory.map(i => i.value), this.humRange.min) - 5,\n          max: Math.max(...this.humHistory.map(i => i.value), this.humRange.max) + 5,\n          markLine: {\n            data: [{\n              yAxis: this.humRange.min,\n              name: '最低阈值',\n              lineStyle: {\n                color: 'blue'\n              }\n            }, {\n              yAxis: this.humRange.max,\n              name: '最高阈值',\n              lineStyle: {\n                color: 'blue'\n              }\n            }]\n          }\n        },\n        series: [{\n          name: '湿度',\n          type: 'line',\n          data: this.humHistory.map(i => i.value),\n          smooth: true,\n          lineStyle: {\n            color: '#3498db'\n          },\n          itemStyle: {\n            color: '#3498db'\n          },\n          areaStyle: {\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: 'rgba(52,152,219,0.3)'\n            }, {\n              offset: 1,\n              color: 'rgba(52,152,219,0)'\n            }])\n          }\n        }]\n      });\n    },\n    // 历史数据更新\n    updateHistory(ref, val) {\n      const timeStr = new Date().toLocaleTimeString();\n      ref.push({\n        time: timeStr,\n        value: val\n      });\n      if (ref.length > this.maxHistory) ref.shift();\n    },\n    // 地图初始化\n    initMap() {\n      const loadMap = () => new Promise((res, rej) => {\n        if (window.AMap) return res(window.AMap);\n        const script = document.createElement('script');\n        script.src = 'https://webapi.amap.com/maps?v=1.4.15&key=你的高德Key';\n        script.onload = () => res(window.AMap || rej(new Error('地图加载失败')));\n        script.onerror = () => rej(new Error('地图脚本加载失败'));\n        document.head.appendChild(script);\n      });\n      loadMap().then(AMap => {\n        this.map = new AMap.Map('map', {\n          resizeEnable: true,\n          zoom: 16,\n          center: [116.397470, 39.908823],\n          viewMode: '2D'\n        });\n        this.marker = new AMap.Marker({\n          position: [116.397470, 39.908823],\n          icon: new AMap.Icon({\n            size: new AMap.Size(32, 32),\n            image: markerIcon,\n            imageSize: new AMap.Size(64, 64),\n            imageOffset: new AMap.Pixel(-16, -16)\n          }),\n          anchor: 'center'\n        });\n        this.map.add(this.marker);\n        this.map.on('complete', () => this.mapStatus = '地图已就绪');\n        this.map.on('error', () => this.mapStatus = '地图渲染错误');\n      }).catch(err => {\n        this.mapStatus = '地图加载失败';\n        console.error(err);\n      });\n    },\n    // WebSocket初始化\n    initWebSocket() {\n      this.mainWs = new WebSocket(this.backendUrl);\n      this.mainWs.onopen = () => {\n        this.mainConn = true;\n        this.mapConn = true;\n      };\n\n      // 核心数据提取与展示逻辑\n      this.mainWs.onmessage = event => {\n        this.loading = false;\n        try {\n          const data = JSON.parse(event.data);\n          console.log(data);\n          // 处理主数据\n          if (1) {\n            // 环境数据更新 - 添加类型检查与默认值\n            this.temp = typeof data.T === 'number' ? data.T : this.temp;\n            this.tempWarn = this.temp < this.tempRange.min || this.temp > this.tempRange.max;\n            this.hum = typeof data.H === 'number' ? data.H : data.H || this.hum;\n            this.humWarn = this.hum < this.humRange.min || this.hum > this.humRange.max;\n\n            // 水位状态更新\n            this.water = {\n              status: parseInt(data.water_level) || 0,\n              value: parseInt(data.water_level) || 0\n            };\n            this.waterAlarm = this.water.status !== 1;\n\n            // 饲料重量更新\n            this.weight = Math.min(Math.max(data.weight || 0, 0), 100);\n            this.weightPercent = Math.min(Math.max(this.weight, 0), 100);\n\n            // 设备状态更新\n            this.devices[0].status = parseInt(data.pump) || 0; // 水泵\n            this.devices[1].status = parseInt(data.motor) || 0; // 电机\n            this.devices[2].status = parseInt(data.light) || 0; // 灯光\n            this.devices[3].status = parseInt(data.door) || 0; // 阀门\n            this.devices[4].status = parseInt(data.heat) || 0; // 加热\n            this.devices[5].status = parseInt(data.fan) || 0; // 风机\n\n            // 更新历史数据与图表\n            this.updateHistory(this.tempHistory, this.temp);\n            this.updateHistory(this.humHistory, this.hum);\n            this.lastUpdate = new Date().toLocaleString();\n            this.renderCharts();\n            this.lng1 = data.lng;\n            this.lat1 = data.lat;\n            console.log(this.lng1, this.lat1);\n            this.lnglat = [this.lng1, this.lat1];\n            console.log(this.lnglat);\n            this.marker?.setPosition([data.lng + 0.01, data.lat - 0.001]);\n            this.map?.panTo([data.lng + 0.01, data.lat - 0.001], {\n              duration: 300\n            });\n            this.course = data.cogt;\n            this.marker?.setRotation((data.cogt % 360 + 360) % 360);\n          }\n        } catch (e) {\n          console.error('数据解析失败:', e);\n        }\n      };\n      this.mainWs.onerror = () => {\n        this.mainConn = false;\n        this.mapConn = false;\n      };\n      this.mainWs.onclose = () => {\n        this.mainConn = false;\n        this.mapConn = false;\n        setTimeout(() => this.initWebSocket(), 3000);\n      };\n    },\n    // 刷新数据\n    refresh() {\n      if (this.mainWs?.readyState === WebSocket.OPEN) {\n        this.mainWs.send(JSON.stringify({\n          type: 'REFRESH_DATA'\n        }));\n        this.lastUpdate = new Date().toLocaleString();\n      }\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.initCharts();\n      this.initMap();\n      this.initWebSocket();\n    });\n  },\n  beforeDestroy() {\n    // 清理资源\n    this.mainWs?.close();\n    this.tempChart?.dispose();\n    this.humChart?.dispose();\n    this.map?.destroy();\n  }\n};","map":{"version":3,"names":["echarts","markerIcon","name","data","weather","date","Date","getMonth","getDate","weekday","getDay","tempMin","tempMax","windDir","windForce","currDate","toLocaleDateString","loading","temp","hum","tempHistory","time","value","humHistory","tempRange","min","max","humRange","mainWs","backendUrl","water","status","weight","devices","mainConn","mapConn","lastUpdate","maxHistory","barHeight","colors","weightPercent","tempWarn","humWarn","waterAlarm","gradientBg","lng1","lat1","lnglat","course","mapStatus","map","marker","tempChart","humChart","computed","methods","initCharts","tempDom","document","getElementById","humDom","init","window","addEventListener","resize","renderCharts","setOption","tooltip","trigger","grid","left","right","bottom","containLabel","xAxis","type","i","axisLabel","rotate","yAxis","Math","markLine","lineStyle","color","series","smooth","itemStyle","areaStyle","graphic","LinearGradient","offset","updateHistory","ref","val","timeStr","toLocaleTimeString","push","length","shift","initMap","loadMap","Promise","res","rej","AMap","script","createElement","src","onload","Error","onerror","head","appendChild","then","Map","resizeEnable","zoom","center","viewMode","Marker","position","icon","Icon","size","Size","image","imageSize","imageOffset","Pixel","anchor","add","on","catch","err","console","error","initWebSocket","WebSocket","onopen","onmessage","event","JSON","parse","log","T","H","parseInt","water_level","pump","motor","light","door","heat","fan","toLocaleString","lng","lat","setPosition","panTo","duration","cogt","setRotation","e","onclose","setTimeout","refresh","readyState","OPEN","send","stringify","mounted","$nextTick","beforeDestroy","close","dispose","destroy"],"sources":["src/views/manager/details.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard\">\r\n    <!-- 顶部信息栏 -->\r\n    <header class=\"top-bar\">\r\n      <div class=\"top-left\">\r\n        <h1>养殖场环境监控系统</h1>\r\n        <div class=\"weather-info\">\r\n          <span>{{ weather.date }} {{ weather.weekday }}</span>\r\n          <span>{{ weather.weather }}</span>\r\n          <span>{{ weather.tempMin }}°~{{ weather.tempMax }}°</span>\r\n          <span>{{ weather.windDir }} {{ weather.windForce }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"top-right\">\r\n        <div class=\"conn-status\">\r\n          <span class=\"dot\" :class=\"{ green: mainConn }\"></span>\r\n          <span>{{ mainConn ? '连接正常' : '连接断开' }}</span>\r\n        </div>\r\n        <span>{{ currDate }}</span>\r\n      </div>\r\n    </header>\r\n\r\n    <!-- 核心内容区 -->\r\n    <main class=\"main-content container\">\r\n      <!-- 环境状态指标 -->\r\n      <section class=\"status-cards panel\">\r\n        <h2>环境跟踪</h2>\r\n        <div class=\"cards\">\r\n          <div class=\"card\" :class=\"{ warn: tempWarn }\">\r\n            <div>当前温度</div>\r\n            <div class=\"val\">{{ typeof temp === 'number' ? temp.toFixed(1) : '0.0' }}°C</div>\r\n          </div>\r\n          <div class=\"card\" :class=\"{ warn: humWarn }\">\r\n            <div>当前湿度</div>\r\n            <div class=\"val\">{{ typeof hum === 'number' ? hum.toFixed(1) : '0.0' }}%</div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <!-- 趋势图表 -->\r\n      <section class=\"charts panel\">\r\n        <h2>环境趋势</h2>\r\n        <div class=\"charts-grid\">\r\n          <div class=\"chart-box\">\r\n            <div>温度历史数据</div>\r\n            <div id=\"tempChart\" class=\"chart\"></div>\r\n          </div>\r\n          <div class=\"chart-box\">\r\n            <div>湿度历史数据</div>\r\n            <div id=\"humChart\" class=\"chart\"></div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <!-- 设备与状态 -->\r\n      <section class=\"device-info panel\">\r\n        <h2>设备与状态信息</h2>\r\n        <div class=\"device-grid\">\r\n          <!-- 水位状态 -->\r\n          <div class=\"card\" :class=\"{ warn: waterAlarm }\">\r\n            <div>水位状态</div>\r\n            <span class=\"status\" :class=\"{ on: water.status === 1 }\">\r\n              {{ water.status === 1 ? '正常' : '有误' }}\r\n            </span>\r\n          </div>\r\n          \r\n          <!-- 饲料重量 -->\r\n          <div class=\"card feed-card\">\r\n            <div>饲料重量状态值</div>\r\n            <div class=\"progress-container\">\r\n              <div class=\"progress-bar\" :style=\"{ height: barHeight + 'px' }\">\r\n                <div \r\n                  class=\"progress-fill\" \r\n                  :class=\"{ low: weightPercent < 20 }\"\r\n                  :style=\"{ \r\n                    height: weightPercent + '%',\r\n                    background: gradientBg \r\n                  }\"\r\n                ></div>\r\n                <div \r\n                  class=\"progress-marker\"\r\n                  :style=\"{ bottom: weightPercent + '%' }\"\r\n                ></div>\r\n              </div>\r\n              <div class=\"weight-info\">\r\n                <span>{{ weight.toFixed(1) }}g</span>\r\n                <span>{{ weightPercent }}%</span>\r\n                <span v-if=\"weightPercent < 20\" class=\"low-warning\">\r\n                  饲料不足，请补充!\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- 水泵设备 -->\r\n          <div class=\"card device-card\">\r\n            <div class=\"icon\">💧</div>\r\n            <div>水泵状态</div>\r\n            <span class=\"status\" :class=\"{ on: devices[0].status === 1 }\">\r\n              {{ devices[0].status === 1 ? '运行中' : '已关闭' }}\r\n            </span>\r\n          </div>\r\n          \r\n          <!-- 电机设备 -->\r\n          <div class=\"card device-card\">\r\n            <div class=\"icon\">🔊</div>\r\n            <div>电机状态</div>\r\n            <span class=\"status\" :class=\"{ on: devices[1].status === 1 }\">\r\n              {{ devices[1].status === 1 ? '运行中' : '已关闭' }}\r\n            </span>\r\n          </div>\r\n          \r\n          <!-- 灯光设备 -->\r\n          <div class=\"card device-card\">\r\n            <div class=\"icon\">💡</div>\r\n            <div>灯光状态</div>\r\n            <span class=\"status\" :class=\"{ on: devices[2].status === 1 }\">\r\n              {{ devices[2].status === 1 ? '运行中' : '已关闭' }}\r\n            </span>\r\n          </div>\r\n          \r\n          <!-- 阀门设备 -->\r\n          <div class=\"card device-card\">\r\n            <div class=\"icon\">🚪</div>\r\n            <div>阀门状态</div>\r\n            <span class=\"status\" :class=\"{ on: devices[3].status === 1 }\">\r\n              {{ devices[3].status === 1 ? '运行中' : '已关闭' }}\r\n            </span>\r\n          </div>\r\n          \r\n          <!-- 加热设备 -->\r\n          <div class=\"card device-card\">\r\n            <div class=\"icon\">🔥</div>\r\n            <div>加热状态</div>\r\n            <span class=\"status\" :class=\"{ on: devices[4].status === 1 }\">\r\n              {{ devices[4].status === 1 ? '运行中' : '已关闭' }}\r\n            </span>\r\n          </div>\r\n          \r\n          <!-- 风机设备 -->\r\n          <div class=\"card device-card\">\r\n            <div class=\"icon\">💨</div>\r\n            <div>风机状态</div>\r\n            <span class=\"status\" :class=\"{ on: devices[5].status === 1 }\">\r\n              {{ devices[5].status === 1 ? '运行中' : '已关闭' }}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <!-- 地图区域 -->\r\n      <section class=\"map-section panel\">\r\n        <h2>位置监控</h2>\r\n        <div class=\"map-container\">\r\n          <div id=\"map\" class=\"map-view\"></div>\r\n          <div class=\"map-status\">\r\n            <span>地图后端连接: </span>\r\n            <span :class=\"{ online: mapConn }\">{{ mapConn ? '已连接' : '已断开' }}</span>\r\n            <span class=\"map-dot\" :class=\"{ green: mapConn }\"></span>\r\n          </div>\r\n          <div class=\"map-data\">\r\n            <div><span>经纬度:</span> <span>{{ lnglat || '等待数据...' }}</span></div>\r\n            <div><span>航向角:</span> <span>{{ course || '0°' }}</span></div>\r\n            <div><span>地图状态:</span> <span>{{ mapStatus }}</span></div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </main>\r\n\r\n    <footer class=\"footer\">\r\n      <div>最后更新时间: {{ lastUpdate }}</div>\r\n      <button class=\"refresh\" @click=\"refresh\">\r\n        <i class=\"fa fa-refresh\"></i> 刷新数据\r\n      </button>\r\n    </footer>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts'\r\nimport markerIcon from '@/assets/imgs/icons8-圈向上-64.png'\r\n\r\nexport default {\r\n  name: 'FarmMonitor',\r\n  data() {\r\n    return {\r\n      // 核心数据\r\n      weather: {\r\n        date: `${new Date().getMonth() + 1}月${new Date().getDate()}日`,\r\n        weekday: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'][new Date().getDay()],\r\n        weather: '晴',\r\n        tempMin: 18,\r\n        tempMax: 30,\r\n        windDir: '东风',\r\n        windForce: '3级'\r\n      },\r\n      currDate: new Date().toLocaleDateString(),\r\n      loading: true, // 添加加载状态\r\n      temp: null,\r\n      hum: null,\r\n      tempHistory: [{ time: '00:00', value: 22 }, { time: '00:05', value: 22.5 }],\r\n      humHistory: [{ time: '00:00', value: 50 }, { time: '00:05', value: 49.5 }],\r\n      tempRange: { min: 18, max: 26 },\r\n      humRange: { min: 40, max: 60 },\r\n\r\n      // WebSocket配置\r\n      mainWs: null,\r\n      backendUrl: 'ws://8.152.103.136:9090/ws/data',\r\n\r\n      // 设备数据\r\n      water: { status: 0, value: 0 },\r\n      weight: 50,\r\n      devices: [\r\n        { name: '水泵', status: 0 },\r\n        { name: '电机', status: 0 },\r\n        { name: '灯光', status: 0 },\r\n        { name: '阀门', status: 0 },\r\n        { name: '加热', status: 0 },\r\n        { name: '风机', status: 0 }\r\n      ],\r\n\r\n      // 连接与配置状态\r\n      mainConn: false,\r\n      mapConn: false,\r\n      lastUpdate: '-',\r\n      maxHistory: 10,\r\n      barHeight: 120,\r\n      colors: ['#43a047', '#8bc34a', '#cddc39'],\r\n      weightPercent: 0,\r\n      tempWarn: false,\r\n      humWarn: false,\r\n      waterAlarm: false,\r\n      gradientBg: 'linear-gradient(to top, #43a047, #8bc34a, #cddc39)',\r\n\r\n      // 地图相关\r\n      lng1: 1,\r\n      lat1: 1,\r\n      lnglat: [1, 1],\r\n      course: 1,\r\n      mapStatus: '地图加载中...',\r\n      map: null,\r\n      marker: null,\r\n\r\n      // 图表实例\r\n      tempChart: null,\r\n      humChart: null\r\n    }\r\n  },\r\n  computed: {\r\n  },\r\n  methods: {\r\n    // 图表初始化与渲染\r\n    initCharts() {\r\n      const tempDom = document.getElementById('tempChart')\r\n      const humDom = document.getElementById('humChart')\r\n      if (!tempDom || !humDom) return\r\n\r\n      this.tempChart = echarts.init(tempDom)\r\n      this.humChart = echarts.init(humDom)\r\n      \r\n      window.addEventListener('resize', () => {\r\n        this.tempChart?.resize()\r\n        this.humChart?.resize()\r\n      })\r\n      this.renderCharts()\r\n    },\r\n    renderCharts() {\r\n      // 温度图表配置\r\n      this.tempChart.setOption({\r\n        tooltip: { trigger: 'axis' },\r\n        grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true },\r\n        xAxis: { \r\n          type: 'category', \r\n          data: this.tempHistory.map(i => i.time),\r\n          axisLabel: { rotate: 30 } \r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          name: '温度(°C)',\r\n          min: Math.min(...this.tempHistory.map(i => i.value), this.tempRange.min) - 2,\r\n          max: Math.max(...this.tempHistory.map(i => i.value), this.tempRange.max) + 2,\r\n          markLine: {\r\n            data: [\r\n              { yAxis: this.tempRange.min, name: '最低阈值', lineStyle: { color: 'red' } },\r\n              { yAxis: this.tempRange.max, name: '最高阈值', lineStyle: { color: 'red' } }\r\n            ]\r\n          }\r\n        },\r\n        series: [{\r\n          name: '温度',\r\n          type: 'line',\r\n          data: this.tempHistory.map(i => i.value),\r\n          smooth: true,\r\n          lineStyle: { color: '#e74c3c' },\r\n          itemStyle: { color: '#e74c3c' },\r\n          areaStyle: { color: new echarts.graphic.LinearGradient(0,0,0,1,[\r\n            { offset: 0, color: 'rgba(231,76,60,0.3)' },\r\n            { offset: 1, color: 'rgba(231,76,60,0)' }\r\n          ])}\r\n        }]\r\n      })\r\n\r\n      // 湿度图表配置\r\n      this.humChart.setOption({\r\n        tooltip: { trigger: 'axis' },\r\n        grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true },\r\n        xAxis: { type: 'category', data: this.humHistory.map(i => i.time), axisLabel: { rotate: 30 } },\r\n        yAxis: {\r\n          type: 'value',\r\n          name: '湿度(%)',\r\n          min: Math.min(...this.humHistory.map(i => i.value), this.humRange.min) - 5,\r\n          max: Math.max(...this.humHistory.map(i => i.value), this.humRange.max) + 5,\r\n          markLine: {\r\n            data: [\r\n              { yAxis: this.humRange.min, name: '最低阈值', lineStyle: { color: 'blue' } },\r\n              { yAxis: this.humRange.max, name: '最高阈值', lineStyle: { color: 'blue' } }\r\n            ]\r\n          }\r\n        },\r\n        series: [{\r\n          name: '湿度',\r\n          type: 'line',\r\n          data: this.humHistory.map(i => i.value),\r\n          smooth: true,\r\n          lineStyle: { color: '#3498db' },\r\n          itemStyle: { color: '#3498db' },\r\n          areaStyle: { color: new echarts.graphic.LinearGradient(0,0,0,1,[\r\n            { offset: 0, color: 'rgba(52,152,219,0.3)' },\r\n            { offset: 1, color: 'rgba(52,152,219,0)' }\r\n          ])}\r\n        }]\r\n      })\r\n    },\r\n\r\n    // 历史数据更新\r\n    updateHistory(ref, val) {\r\n      const timeStr = new Date().toLocaleTimeString()\r\n      ref.push({ time: timeStr, value: val })\r\n      if (ref.length > this.maxHistory) ref.shift()\r\n    },\r\n\r\n    // 地图初始化\r\n    initMap() {\r\n      const loadMap = () => new Promise((res, rej) => {\r\n        if (window.AMap) return res(window.AMap)\r\n        const script = document.createElement('script')\r\n        script.src = 'https://webapi.amap.com/maps?v=1.4.15&key=你的高德Key'\r\n        script.onload = () => res(window.AMap || rej(new Error('地图加载失败')))\r\n        script.onerror = () => rej(new Error('地图脚本加载失败'))\r\n        document.head.appendChild(script)\r\n      })\r\n\r\n      loadMap().then(AMap => {\r\n        this.map = new AMap.Map('map', {\r\n          resizeEnable: true,\r\n          zoom: 16,\r\n          center: [116.397470, 39.908823],\r\n          viewMode: '2D'\r\n        })\r\n  \r\n        this.marker = new AMap.Marker({\r\n          position: [116.397470, 39.908823],\r\n          icon: new AMap.Icon({\r\n            size: new AMap.Size(32, 32),\r\n            image: markerIcon,\r\n            imageSize: new AMap.Size(64, 64),\r\n            imageOffset: new AMap.Pixel(-16, -16)\r\n          }),\r\n          anchor: 'center'\r\n        })\r\n        this.map.add(this.marker)\r\n        \r\n        this.map.on('complete', () => this.mapStatus = '地图已就绪')\r\n        this.map.on('error', () => this.mapStatus = '地图渲染错误')\r\n      }).catch(err => {\r\n        this.mapStatus = '地图加载失败'\r\n        console.error(err)\r\n      })\r\n    },\r\n\r\n    // WebSocket初始化\r\n    initWebSocket() {\r\n      this.mainWs = new WebSocket(this.backendUrl)\r\n      \r\n      this.mainWs.onopen = () => {\r\n        this.mainConn = true\r\n        this.mapConn = true\r\n      }\r\n      \r\n      // 核心数据提取与展示逻辑\r\n      this.mainWs.onmessage = (event) => {\r\n        this.loading = false\r\n        try {\r\n          const data = JSON.parse(event.data)\r\n          console.log(data)\r\n          // 处理主数据\r\n          if (1) {\r\n            // 环境数据更新 - 添加类型检查与默认值\r\n            this.temp = typeof data.T === 'number' ? data.T : this.temp;\r\n            this.tempWarn = this.temp < this.tempRange.min || this.temp > this.tempRange.max\r\n            this.hum = typeof data.H === 'number' ? data.H : (data.H) || this.hum\r\n            this.humWarn = this.hum < this.humRange.min || this.hum > this.humRange.max\r\n      \r\n            // 水位状态更新\r\n            this.water = {\r\n              status: parseInt(data.water_level) || 0,\r\n              value: parseInt(data.water_level) || 0\r\n            }\r\n            this.waterAlarm = this.water.status !== 1\r\n            \r\n            // 饲料重量更新\r\n            this.weight = Math.min(Math.max((data.weight) || 0, 0), 100)\r\n            this.weightPercent = Math.min(Math.max(this.weight, 0), 100)\r\n            \r\n            // 设备状态更新\r\n            this.devices[0].status = parseInt(data.pump) || 0    // 水泵\r\n            this.devices[1].status = parseInt(data.motor) || 0   // 电机\r\n            this.devices[2].status = parseInt(data.light) || 0   // 灯光\r\n            this.devices[3].status = parseInt(data.door) || 0    // 阀门\r\n            this.devices[4].status = parseInt(data.heat) || 0    // 加热\r\n            this.devices[5].status = parseInt(data.fan) || 0     // 风机\r\n\r\n            // 更新历史数据与图表\r\n            this.updateHistory(this.tempHistory, this.temp)\r\n            this.updateHistory(this.humHistory, this.hum)\r\n            this.lastUpdate = new Date().toLocaleString()\r\n            this.renderCharts()\r\n            this.lng1 = data.lng\r\n            this.lat1 = data.lat\r\n            console.log(this.lng1, this.lat1)\r\n            this.lnglat = [this.lng1,this.lat1]\r\n            console.log(this.lnglat)\r\n            this.marker?.setPosition([data.lng + 0.01, data.lat - 0.001])\r\n            this.map?.panTo([(data.lng) + 0.01, (data.lat) - 0.001], { duration: 300 })\r\n            this.course = data.cogt\r\n            this.marker?.setRotation((((data.cogt) % 360) + 360) % 360)\r\n          } \r\n        } catch (e) {\r\n          console.error('数据解析失败:', e)\r\n        }\r\n      }\r\n      \r\n      this.mainWs.onerror = () => {\r\n        this.mainConn = false\r\n        this.mapConn = false\r\n      }\r\n      \r\n      this.mainWs.onclose = () => {\r\n        this.mainConn = false\r\n        this.mapConn = false\r\n        setTimeout(() => this.initWebSocket(), 3000)\r\n      }\r\n    },\r\n    \r\n    // 刷新数据\r\n    refresh() {\r\n      if (this.mainWs?.readyState === WebSocket.OPEN) {\r\n        this.mainWs.send(JSON.stringify({ type: 'REFRESH_DATA' }))\r\n        this.lastUpdate = new Date().toLocaleString()\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      this.initCharts()\r\n      this.initMap()\r\n      this.initWebSocket()\r\n    })\r\n  },\r\n  beforeDestroy() {\r\n    // 清理资源\r\n    this.mainWs?.close()\r\n    this.tempChart?.dispose()\r\n    this.humChart?.dispose()\r\n    this.map?.destroy()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* 全局样式优化 */\r\n* { \r\n  margin: 0; \r\n  padding: 0; \r\n  box-sizing: border-box; \r\n}\r\n.dashboard { \r\n  font-family: 'Microsoft YaHei', sans-serif; \r\n  display: flex; \r\n  flex-direction: column; \r\n  background: #f5f7fa; \r\n  min-height: 100vh; \r\n}\r\n\r\n/* 顶部栏优化：响应式堆叠 */\r\n.top-bar { \r\n  display: flex; \r\n  justify-content: space-between; \r\n  align-items: center; \r\n  padding: 1rem 2rem; \r\n  background: #2c3e50; \r\n  color: #fff; \r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1); \r\n  flex-wrap: wrap; \r\n  gap: 1rem; \r\n}\r\n/* 顶部左右分区，小屏幕自动堆叠 */\r\n.top-left { flex: 1; min-width: 280px; }\r\n.top-right { flex: 0 0 auto; display: flex; align-items: center; gap: 1.5rem; }\r\n.weather-info { \r\n  display: flex; \r\n  gap: 1.5rem; \r\n  font-size: 0.9rem; \r\n  color: #e0e0e0; \r\n  flex-wrap: wrap;  /* 天气信息过多时自动换行 */\r\n  margin-top: 0.5rem;\r\n}\r\n.conn-status { display: flex; align-items: center; gap: 0.5rem; }\r\n.dot { display: inline-block; width: 10px; height: 10px; border-radius: 50%; background: #e74c3c; }\r\n.dot.green { background: #27ae60; }\r\n.currDate { font-size: 0.9rem; }\r\n\r\n/* 主内容区优化：容器化+间距统一 */\r\n.main-content { \r\n  flex: 1; \r\n  padding: 1.5rem; \r\n  display: flex; \r\n  flex-direction: column; \r\n  gap: 1.5rem;  /* 统一模块间距 */\r\n  overflow-y: auto; \r\n}\r\n/* 容器限制最大宽度，避免大屏过宽 */\r\n.container { \r\n  max-width: 1600px; \r\n  margin: 0 auto;  /* 居中显示 */\r\n  width: 100%; \r\n  padding: 0 1rem; \r\n}\r\n/* 面板样式：统一模块外观 */\r\n.panel { \r\n  background: #fff; \r\n  border-radius: 8px; \r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.08); \r\n  padding: 1.2rem 1.5rem; \r\n  transition: box-shadow 0.3s ease; \r\n}\r\n.panel:hover { box-shadow: 0 4px 12px rgba(0,0,0,0.12); } /* 悬停增强阴影 */\r\nh2 { \r\n  font-size: 1.2rem; \r\n  color: #2c3e50; \r\n  margin-bottom: 1rem; \r\n  padding-bottom: 0.5rem; \r\n  border-bottom: 1px solid #f0f0f0; \r\n  display: flex; \r\n  align-items: center; \r\n  gap: 0.5rem; \r\n}\r\nh2::before {  /* 增加标题前缀标识 */\r\n  content: '';\r\n  width: 4px;\r\n  height: 16px;\r\n  background: #3498db;\r\n  border-radius: 2px;\r\n}\r\n\r\n/* 环境状态卡片优化：紧凑布局 */\r\n.status-cards .cards { \r\n  display: grid; \r\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));  /* 自适应列数 */\r\n  gap: 1rem; \r\n  height: 120px;  /* 降低高度，更紧凑 */\r\n}\r\n.card { \r\n  background: #fff; \r\n  border-radius: 6px; \r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05); \r\n  padding: 1rem; \r\n  display: flex; \r\n  flex-direction: column; \r\n  justify-content: center; \r\n  gap: 0.5rem; \r\n  border: 1px solid #f0f0f0;  /* 增加边框区分 */\r\n}\r\n.card.warn { \r\n  border-left: 4px solid #e74c3c; \r\n  background: #fff8f8;  /* 警告状态背景色微调 */\r\n}\r\n.card .val { \r\n  font-size: 1.8rem; \r\n  font-weight: bold; \r\n  color: #2c3e50; \r\n}\r\n\r\n/* 图表区域优化：响应式自适应 */\r\n.charts .charts-grid { \r\n  display: grid; \r\n  grid-template-columns: 1fr;  /* 默认单列，大屏自动调整 */\r\n  gap: 1.5rem; \r\n  height: 400px; \r\n}\r\n/* 中等屏幕以上显示双列 */\r\n@media (min-width: 992px) {\r\n  .charts .charts-grid { grid-template-columns: repeat(2, 1fr); }\r\n}\r\n.chart-box { \r\n  display: flex; \r\n  flex-direction: column; \r\n  gap: 0.5rem; \r\n}\r\n.chart-box > div:first-child {  /* 图表标题样式 */\r\n  font-size: 0.95rem;\r\n  color: #666;\r\n  padding-left: 0.5rem;\r\n}\r\n.chart-box .chart { \r\n  width: 100%; \r\n  height: 100%; \r\n  min-height: 250px; \r\n}\r\n\r\n\r\n/* 设备信息区域优化：灵活网格 */\r\n.device-info { \r\n  padding-bottom: 1.5rem; \r\n}\r\n.device-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));  /* 自适应列数 */\r\n  gap: 1.2rem;\r\n}\r\n\r\n/* 设备卡片优化：统一尺寸与交互 */\r\n.device-grid .card {\r\n  height: 100%;\r\n  min-height: 110px;  /* 降低高度，更紧凑 */\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  padding: 1rem;\r\n  transition: all 0.2s ease;  /* 统一过渡效果 */\r\n  border: 1px solid #f0f0f0;\r\n}\r\n.device-grid .card:hover {\r\n  transform: translateY(-3px);\r\n  box-shadow: 0 4px 12px rgba(0,0,0,0.08);\r\n  border-color: #e0e0e0;\r\n}\r\n\r\n/* 饲料卡片响应式调整 */\r\n.feed-card {\r\n  grid-column: span 2;  /* 大屏跨2列 */\r\n  min-height: 140px;\r\n}\r\n/* 小屏幕饲料卡片跨1列 */\r\n@media (max-width: 576px) {\r\n  .feed-card { grid-column: span 1; }\r\n}\r\n\r\n/* 饲料重量进度条优化 */\r\n.feed-card .progress-container { \r\n  display: flex; \r\n  align-items: center; \r\n  gap: 1rem; \r\n  justify-content: center; \r\n  flex: 1; \r\n}\r\n.progress-bar {\r\n  width: 50px;  /* 窄化进度条 */\r\n  border: 2px solid #e0e0e0;\r\n  border-radius: 10px;\r\n  position: relative;\r\n  background-color: #f5f5f5;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1) inset;\r\n}\r\n.progress-fill {\r\n  width: 100%;\r\n  position: absolute;\r\n  bottom: 0;\r\n  transition: height 0.8s ease;\r\n  border-radius: 8px;\r\n}\r\n.progress-marker {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 3px;\r\n  background-color: #333;\r\n  transform: translateY(50%);\r\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);\r\n}\r\n.progress-fill.low { \r\n  background: linear-gradient(to top, #e74c3c, #ff5252) !important;\r\n  animation: pulse 1.5s infinite; \r\n}\r\n.weight-info { \r\n  display: flex; \r\n  flex-direction: column; \r\n  gap: 0.5rem; \r\n  align-items: center; \r\n}\r\n.weight-info span {\r\n  font-weight: 500;\r\n}\r\n.low-warning {\r\n  color: #e74c3c;\r\n  font-size: 0.8rem;\r\n  font-weight: bold;\r\n  animation: shake 1s infinite;\r\n}\r\n\r\n/* 状态样式增强 */\r\n.status { \r\n  font-weight: 500; \r\n  padding: 0.2rem 0.8rem;\r\n  border-radius: 12px;\r\n  font-size: 0.85rem;\r\n}\r\n.status.on { \r\n  color: #27ae60; \r\n  background: #f1f9f7;\r\n}\r\n.status:not(.on) { \r\n  color: #666; \r\n  background: #f5f5f5;\r\n}\r\n\r\n/* 设备图标样式 */\r\n.device-card .icon {\r\n  font-size: 1.8rem;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n/* 地图区域优化：高度自适应 */\r\n.map-section { \r\n  padding-bottom: 1.5rem; \r\n}\r\n.map-container { \r\n  width: 100%; \r\n  height: 500px;  /* 降低默认高度 */\r\n  position: relative; \r\n  border-radius: 6px; \r\n  overflow: hidden; \r\n  border: 1px solid #f0f0f0;\r\n}\r\n/* 小屏幕地图高度降低 */\r\n@media (max-width: 768px) {\r\n  .map-container { height: 350px; }\r\n}\r\n.map-view { width: 100%; height: 100%; }\r\n.map-status { \r\n  position: absolute; \r\n  top: 15px; \r\n  right: 15px; \r\n  background: rgba(255,255,255,0.95);  /* 增强透明度 */\r\n  padding: 0.5rem 1rem; \r\n  border-radius: 4px; \r\n  box-shadow: 0 2px 6px rgba(0,0,0,0.1); \r\n  font-size: 0.85rem; \r\n  z-index: 10;  /* 确保在地图之上 */\r\n}\r\n.map-dot { display: inline-block; width: 8px; height: 8px; border-radius: 50%; background: #e74c3c; margin-left: 5px; }\r\n.map-dot.green { background: #27ae60; }\r\n.map-data { \r\n  position: absolute; \r\n  bottom: 15px; \r\n  left: 15px; \r\n  background: rgba(255,255,255,0.95); \r\n  padding: 0.8rem; \r\n  border-radius: 6px; \r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.15); \r\n  font-size: 0.9rem; \r\n  display: flex; \r\n  flex-wrap: wrap;  /* 小屏幕自动换行 */\r\n  gap: 1rem; \r\n  z-index: 10;\r\n}\r\n.map-data > div { display: flex; gap: 0.5rem; }\r\n\r\n\r\n/* 底部区域优化 */\r\n.footer { \r\n  height: 56px;  /* 增加高度，提升点击区域 */\r\n  display: flex; \r\n  justify-content: space-between; \r\n  align-items: center; \r\n  padding: 0 2rem; \r\n  background: #2c3e50; \r\n  color: #fff; \r\n  font-size: 0.9rem; \r\n}\r\n.refresh { \r\n  background: #3498db; \r\n  color: #fff; \r\n  border: none; \r\n  border-radius: 4px; \r\n  padding: 0.5rem 1rem;  /* 扩大点击区域 */\r\n  display: flex; \r\n  align-items: center; \r\n  gap: 0.5rem; \r\n  cursor: pointer; \r\n  transition: background 0.2s ease;\r\n}\r\n.refresh:hover { \r\n  background: #2980b9; \r\n  transform: translateY(-1px);\r\n}\r\n.refresh:active { transform: translateY(0); }\r\n\r\n\r\n/* 响应式断点细化 */\r\n/* 超小屏幕（手机） */\r\n@media (max-width: 576px) {\r\n  .top-bar { padding: 0.8rem 1rem; }\r\n  .weather-info { gap: 0.8rem; font-size: 0.85rem; }\r\n  .main-content { padding: 1rem 0.5rem; gap: 1rem; }\r\n  .panel { padding: 1rem; }\r\n  .device-grid { gap: 0.8rem; }\r\n  .map-data { gap: 0.8rem; padding: 0.6rem; font-size: 0.85rem; }\r\n}\r\n\r\n/* 小屏幕（平板竖屏） */\r\n@media (min-width: 577px) and (max-width: 768px) {\r\n  .device-grid { grid-template-columns: repeat(2, 1fr); }\r\n  .charts .charts-grid { height: 350px; }\r\n}\r\n\r\n/* 中等屏幕（平板横屏） */\r\n@media (min-width: 769px) and (max-width: 992px) {\r\n  .device-grid { grid-template-columns: repeat(3, 1fr); }\r\n  .charts .charts-grid { height: 380px; }\r\n}\r\n\r\n/* 大屏幕（桌面） */\r\n@media (min-width: 993px) and (max-width: 1200px) {\r\n  .device-grid { grid-template-columns: repeat(4, 1fr); }\r\n}\r\n\r\n/* 超大屏幕 */\r\n@media (min-width: 1201px) {\r\n  .device-grid { grid-template-columns: repeat(5, 1fr); }\r\n}\r\n\r\n/* 动画效果 */\r\n@keyframes pulse { \r\n  0% { opacity: 1; } \r\n  50% { opacity: 0.6; } \r\n  100% { opacity: 1; } \r\n}\r\n\r\n@keyframes shake {\r\n  0%, 100% { transform: translateX(0); }\r\n  25% { transform: translateX(-3px); }\r\n  75% { transform: translateX(3px); }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}