{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { ref } from 'vue';\n\n// 创建事件总线（优化内存泄漏）\nconst eventBus = {\n  events: {},\n  on(event, callback) {\n    if (!this.events[event]) this.events[event] = [];\n    this.events[event].push(callback);\n  },\n  emit(event, data) {\n    if (this.events[event]) {\n      // 复制一份回调列表，避免执行中删除导致的问题\n      [...this.events[event]].forEach(callback => callback(data));\n    }\n  },\n  off(event, callback) {\n    if (this.events[event]) {\n      this.events[event] = this.events[event].filter(cb => cb !== callback);\n    }\n  }\n};\n\n// SSE连接配置\nconst backendUrl = \"ws://8.152.103.136:9090/ws/data\";\nlet mainEs = null;\nlet mapEs = null;\nlet isConnected = ref(false);\n\n// 创建SSE连接的通用方法（优化连接管理）\nconst createSSE = (url, eventName) => {\n  // 关闭已存在的连接并清空引用\n  if (eventName === 'main' && mainEs) {\n    mainEs.close();\n    mainEs = null;\n  }\n  if (eventName === 'map' && mapEs) {\n    mapEs.close();\n    mapEs = null;\n  }\n  const ws = new WebSocket(url);\n\n  // 连接状态检查函数\n  const updateConnectionStatus = () => {\n    const isOpen = ws.readyState === WebSocket.OPEN;\n    isConnected.value = isOpen;\n    eventBus.emit('connectionStatus', isOpen);\n  };\n\n  // 初始连接成功\n  ws.onopen = () => {\n    updateConnectionStatus();\n    console.log(`${eventName} WebSocket连接已建立`);\n  };\n\n  // 接收消息处理\n  ws.onmessage = ev => {\n    try {\n      // 打印原始接收数据\n      console.log(`[${new Date().toISOString()}] ${eventName} WebSocket接收到原始数据:`, ev.data);\n\n      // 解析JSON数据\n      const data = JSON.parse(ev.data);\n      console.log(`[${new Date().toISOString()}] ${eventName} WebSocket数据解析成功:`, data);\n\n      // 可以单独提取各个字段\n      const temperature = data.T; // 温度: 30.29\n      const humidity = data.H; // 湿度: 64.26\n      const longitude = data.lng; // 经度: 0.000000\n      const latitude = data.lat; // 纬度: 0.000000\n      const altitude = data.altitude; // 海拔: 0.000000\n      const course = data.cogt; // 航向: 0.000000\n      const speed = data.speed; // 速度: 0.00\n      const waterLevel = data.water_level; // 水位: 1\n      const weight = data.weight; // 重量: 45\n      const pumpStatus = data.pump; // 泵状态: 1 (可能表示开启)\n      const motorStatus = data.motor; // 电机状态: 0 (可能表示关闭)\n      const lightStatus = data.light; // 灯光状态: 0 (可能表示关闭)\n      const doorStatus = data.door; // 门状态: 0 (可能表示关闭)\n      const heatStatus = data.heat; // 加热状态: 0 (可能表示关闭)\n      const fanStatus = data.fan; // 风扇状态: 1 (可能表示开启)\n\n      const postData = {\n        time: new Date().toISOString(),\n        // 添加当前时间戳\n        t: temperature,\n        h: humidity,\n        lng: longitude,\n        lat: latitude,\n        altitude: altitude,\n        cogt: course,\n        speed: speed,\n        waterlevel: waterLevel,\n        weight: weight,\n        pump: pumpStatus,\n        motor: motorStatus,\n        light: lightStatus,\n        door: doorStatus,\n        heat: heatStatus,\n        fan: fanStatus\n      };\n\n      // 发送add请求到后端\n      console.log(`[${new Date().toISOString()}] 准备发送数据到后端:`, postData);\n      fetch('http://8.152.103.126:9090/rtsd/add', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n          // 可以添加其他需要的请求头，如认证信息\n          // 'Authorization': 'Bearer ' + token\n        },\n        body: JSON.stringify(postData)\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      }).then(result => {\n        console.log(`[${new Date().toISOString()}] 数据添加成功:`, result);\n      }).catch(error => {\n        console.error(`[${new Date().toISOString()}] 数据添加失败:`, error);\n      });\n\n      // 触发事件，传递解析后的数据\n      eventBus.emit(eventName, data);\n      console.log(`[${new Date().toISOString()}] ${eventName} 事件已触发，数据已传递`);\n    } catch (e) {\n      console.error(`[${new Date().toISOString()}] ${eventName} WebSocket数据解析失败:`, e);\n      console.error(`[${new Date().toISOString()}] 解析失败的原始数据:`, ev.data);\n    }\n  };\n\n  // 错误处理与重连\n  ws.onerror = () => {\n    updateConnectionStatus();\n    console.error(`${eventName} WebSocket连接错误，尝试重连...`);\n    // 避免重复重连（仅当前连接实例未被替换时）\n    if (eventName === 'main' && mainEs === ws || eventName === 'map' && mapEs === ws) {\n      setTimeout(() => createSSE(url, eventName), 5000);\n    }\n  };\n\n  // 后端主动关闭连接时重连\n  ws.onclose = () => {\n    updateConnectionStatus();\n    console.log(`${eventName} WebSocket连接被关闭，尝试重连...`);\n    if (eventName === 'main' && mainEs === ws || eventName === 'map' && mapEs === ws) {\n      setTimeout(() => createSSE(url, eventName), 5000);\n    }\n  };\n\n  // 保存连接实例\n  if (eventName === 'main') mainEs = ws;\n  if (eventName === 'map') mapEs = ws;\n  return ws;\n};\n\n// 初始化连接（使用区分的端点）\nconst initConnections = () => {\n  createSSE(backendUrl, 'main'); // 主数据端点\n  createSSE(backendUrl, 'map'); // 地图数据端点\n};\n\n// 关闭所有连接（优化引用清理）\nconst closeConnections = () => {\n  if (mainEs) {\n    mainEs.close();\n    mainEs = null;\n  }\n  if (mapEs) {\n    mapEs.close();\n    mapEs = null;\n  }\n  isConnected.value = false;\n  eventBus.emit('connectionStatus', false);\n};\n\n// 导出服务（优化事件解绑）\nexport default {\n  eventBus,\n  isConnected,\n  initConnections,\n  closeConnections,\n  onMainData: callback => {\n    eventBus.on('main', callback);\n    return () => eventBus.off('main', callback); // 返回解绑函数\n  },\n  onMapData: callback => {\n    eventBus.on('map', callback);\n    return () => eventBus.off('map', callback);\n  },\n  onConnectionStatus: callback => {\n    eventBus.on('connectionStatus', callback);\n    return () => eventBus.off('connectionStatus', callback);\n  }\n};","map":{"version":3,"names":["ref","eventBus","events","on","event","callback","push","emit","data","forEach","off","filter","cb","backendUrl","mainEs","mapEs","isConnected","createSSE","url","eventName","close","ws","WebSocket","updateConnectionStatus","isOpen","readyState","OPEN","value","onopen","console","log","onmessage","ev","Date","toISOString","JSON","parse","temperature","T","humidity","H","longitude","lng","latitude","lat","altitude","course","cogt","speed","waterLevel","water_level","weight","pumpStatus","pump","motorStatus","motor","lightStatus","light","doorStatus","door","heatStatus","heat","fanStatus","fan","postData","time","t","h","waterlevel","fetch","method","headers","body","stringify","then","response","ok","Error","status","json","result","catch","error","e","onerror","setTimeout","onclose","initConnections","closeConnections","onMainData","onMapData","onConnectionStatus"],"sources":["C:/Users/lenovo/Desktop/牧瞳/AIoT-herdeye/herdeye_vue/vue/src/services/sseService.js"],"sourcesContent":["import { ref } from 'vue'\r\n\r\n// 创建事件总线（优化内存泄漏）\r\nconst eventBus = {\r\n  events: {},\r\n  on(event, callback) {\r\n    if (!this.events[event]) this.events[event] = [];\r\n    this.events[event].push(callback);\r\n  },\r\n  emit(event, data) {\r\n    if (this.events[event]) {\r\n      // 复制一份回调列表，避免执行中删除导致的问题\r\n      [...this.events[event]].forEach(callback => callback(data));\r\n    }\r\n  },\r\n  off(event, callback) {\r\n    if (this.events[event]) {\r\n      this.events[event] = this.events[event].filter(cb => cb !== callback);\r\n    }\r\n  }\r\n};\r\n\r\n// SSE连接配置\r\nconst backendUrl = \"ws://8.152.103.136:9090/ws/data\";\r\nlet mainEs = null;\r\nlet mapEs = null;\r\nlet isConnected = ref(false);\r\n\r\n// 创建SSE连接的通用方法（优化连接管理）\r\nconst createSSE = (url, eventName) => {\r\n  // 关闭已存在的连接并清空引用\r\n  if (eventName === 'main' && mainEs) {\r\n    mainEs.close();\r\n    mainEs = null;\r\n  }\r\n  if (eventName === 'map' && mapEs) {\r\n    mapEs.close();\r\n    mapEs = null;\r\n  }\r\n\r\n  const ws = new WebSocket(url);\r\n\r\n  // 连接状态检查函数\r\n  const updateConnectionStatus = () => {\r\n    const isOpen = ws.readyState === WebSocket.OPEN;\r\n    isConnected.value = isOpen;\r\n    eventBus.emit('connectionStatus', isOpen);\r\n  };\r\n\r\n  // 初始连接成功\r\n  ws.onopen = () => {\r\n    updateConnectionStatus();\r\n    console.log(`${eventName} WebSocket连接已建立`);\r\n  };\r\n\r\n  // 接收消息处理\r\n  ws.onmessage = (ev) => {\r\n    try {\r\n        // 打印原始接收数据\r\n        console.log(`[${new Date().toISOString()}] ${eventName} WebSocket接收到原始数据:`, ev.data);\r\n        \r\n        // 解析JSON数据\r\n        const data = JSON.parse(ev.data);\r\n        console.log(`[${new Date().toISOString()}] ${eventName} WebSocket数据解析成功:`, data);\r\n        \r\n        // 可以单独提取各个字段\r\n        const temperature = data.T;       // 温度: 30.29\r\n        const humidity = data.H;          // 湿度: 64.26\r\n        const longitude = data.lng;       // 经度: 0.000000\r\n        const latitude = data.lat;        // 纬度: 0.000000\r\n        const altitude = data.altitude;   // 海拔: 0.000000\r\n        const course = data.cogt;         // 航向: 0.000000\r\n        const speed = data.speed;         // 速度: 0.00\r\n        const waterLevel = data.water_level; // 水位: 1\r\n        const weight = data.weight;       // 重量: 45\r\n        const pumpStatus = data.pump;     // 泵状态: 1 (可能表示开启)\r\n        const motorStatus = data.motor;   // 电机状态: 0 (可能表示关闭)\r\n        const lightStatus = data.light;   // 灯光状态: 0 (可能表示关闭)\r\n        const doorStatus = data.door;     // 门状态: 0 (可能表示关闭)\r\n        const heatStatus = data.heat;     // 加热状态: 0 (可能表示关闭)\r\n        const fanStatus = data.fan;       // 风扇状态: 1 (可能表示开启)\r\n\r\n        const postData = {\r\n            time: new Date().toISOString(), // 添加当前时间戳\r\n            t: temperature,\r\n            h: humidity,\r\n            lng: longitude,\r\n            lat: latitude,\r\n            altitude: altitude,\r\n            cogt: course,\r\n            speed: speed,\r\n            waterlevel: waterLevel,\r\n            weight: weight,\r\n            pump: pumpStatus,\r\n            motor: motorStatus,\r\n            light: lightStatus,\r\n            door: doorStatus,\r\n            heat: heatStatus,\r\n            fan: fanStatus\r\n        };\r\n        \r\n        // 发送add请求到后端\r\n        console.log(`[${new Date().toISOString()}] 准备发送数据到后端:`, postData);\r\n        fetch('http://8.152.103.126:9090/rtsd/add', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                // 可以添加其他需要的请求头，如认证信息\r\n                // 'Authorization': 'Bearer ' + token\r\n            },\r\n            body: JSON.stringify(postData)\r\n        })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(result => {\r\n            console.log(`[${new Date().toISOString()}] 数据添加成功:`, result);\r\n        })\r\n        .catch(error => {\r\n            console.error(`[${new Date().toISOString()}] 数据添加失败:`, error);\r\n        });   \r\n\r\n        // 触发事件，传递解析后的数据\r\n        eventBus.emit(eventName, data);\r\n        console.log(`[${new Date().toISOString()}] ${eventName} 事件已触发，数据已传递`);\r\n        \r\n    } catch (e) {\r\n        console.error(`[${new Date().toISOString()}] ${eventName} WebSocket数据解析失败:`, e);\r\n        console.error(`[${new Date().toISOString()}] 解析失败的原始数据:`, ev.data);\r\n    }\r\n  };\r\n\r\n  // 错误处理与重连\r\n  ws.onerror = () => {\r\n    updateConnectionStatus();\r\n    console.error(`${eventName} WebSocket连接错误，尝试重连...`);\r\n    // 避免重复重连（仅当前连接实例未被替换时）\r\n    if ((eventName === 'main' && mainEs === ws) || (eventName === 'map' && mapEs === ws)) {\r\n      setTimeout(() => createSSE(url, eventName), 5000);\r\n    }\r\n  };\r\n\r\n  // 后端主动关闭连接时重连\r\n  ws.onclose = () => {\r\n    updateConnectionStatus();\r\n    console.log(`${eventName} WebSocket连接被关闭，尝试重连...`);\r\n    if ((eventName === 'main' && mainEs === ws) || (eventName === 'map' && mapEs === ws)) {\r\n      setTimeout(() => createSSE(url, eventName), 5000);\r\n    }\r\n  };\r\n\r\n  // 保存连接实例\r\n  if (eventName === 'main') mainEs = ws;\r\n  if (eventName === 'map') mapEs = ws;\r\n\r\n  return ws;\r\n};\r\n\r\n// 初始化连接（使用区分的端点）\r\nconst initConnections = () => {\r\n  createSSE(backendUrl, 'main');    // 主数据端点\r\n  createSSE(backendUrl, 'map');    // 地图数据端点\r\n};\r\n\r\n// 关闭所有连接（优化引用清理）\r\nconst closeConnections = () => {\r\n  if (mainEs) {\r\n    mainEs.close();\r\n    mainEs = null;\r\n  }\r\n  if (mapEs) {\r\n    mapEs.close();\r\n    mapEs = null;\r\n  }\r\n  isConnected.value = false;\r\n  eventBus.emit('connectionStatus', false);\r\n};\r\n\r\n// 导出服务（优化事件解绑）\r\nexport default {\r\n  eventBus,\r\n  isConnected,\r\n  initConnections,\r\n  closeConnections,\r\n  onMainData: (callback) => {\r\n    eventBus.on('main', callback);\r\n    return () => eventBus.off('main', callback); // 返回解绑函数\r\n  },\r\n  onMapData: (callback) => {\r\n    eventBus.on('map', callback);\r\n    return () => eventBus.off('map', callback);\r\n  },\r\n  onConnectionStatus: (callback) => {\r\n    eventBus.on('connectionStatus', callback);\r\n    return () => eventBus.off('connectionStatus', callback);\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}