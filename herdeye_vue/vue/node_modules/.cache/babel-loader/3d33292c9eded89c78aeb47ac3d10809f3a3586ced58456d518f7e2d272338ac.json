{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { ref, onMounted, onUnmounted } from 'vue';\n\n// 创建事件总线\nconst eventBus = {\n  events: {},\n  on(event, callback) {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(callback);\n  },\n  emit(event, data) {\n    if (this.events[event]) {\n      this.events[event].forEach(callback => callback(data));\n    }\n  },\n  off(event, callback) {\n    if (this.events[event]) {\n      this.events[event] = this.events[event].filter(cb => cb !== callback);\n    }\n  }\n};\n\n// SSE连接配置\nconst backendUrl = 'http://8.152.103.136:9090';\nlet mainEs, mapEs;\nlet isConnected = ref(false);\n\n// 创建SSE连接的通用方法\nconst createSSE = (url, eventName) => {\n  // 关闭已存在的连接\n  if (eventName === 'main' && mainEs) mainEs.close();\n  if (eventName === 'map' && mapEs) mapEs.close();\n  const es = new EventSource(url);\n\n  // 连接成功处理\n  es.addEventListener('connected', () => {\n    isConnected.value = true;\n    eventBus.emit('connectionStatus', true);\n    console.log(`${eventName} SSE连接成功`);\n  });\n\n  // 接收消息处理\n  es.onmessage = ev => {\n    try {\n      const data = JSON.parse(ev.data);\n      eventBus.emit(eventName, data);\n    } catch (e) {\n      console.error(`${eventName} SSE数据解析失败:`, e);\n    }\n  };\n\n  // 错误处理与重连\n  es.onerror = () => {\n    isConnected.value = false;\n    eventBus.emit('connectionStatus', false);\n    console.error(`${eventName} SSE连接错误，尝试重连...`);\n    // 5秒后重连\n    setTimeout(() => createSSE(url, eventName), 5000);\n  };\n\n  // 保存连接实例\n  if (eventName === 'main') mainEs = es;\n  if (eventName === 'map') mapEs = es;\n  return es;\n};\n\n// 初始化连接\nconst initConnections = () => {\n  createSSE(`${backendUrl}/sse/main`, 'main'); // 主数据端点\n  createSSE(`${backendUrl}/sse/map`, 'map'); // 地图数据端点\n};\n\n// 关闭所有连接\nconst closeConnections = () => {\n  if (mainEs) mainEs.close();\n  if (mapEs) mapEs.close();\n  isConnected.value = false;\n  eventBus.emit('connectionStatus', false);\n};\n\n// 导出服务\nexport default {\n  eventBus,\n  isConnected,\n  initConnections,\n  closeConnections,\n  onMainData: callback => eventBus.on('main', callback),\n  onMapData: callback => eventBus.on('map', callback),\n  offMainData: callback => eventBus.off('main', callback),\n  offMapData: callback => eventBus.off('map', callback),\n  onConnectionStatus: callback => eventBus.on('connectionStatus', callback)\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","eventBus","events","on","event","callback","push","emit","data","forEach","off","filter","cb","backendUrl","mainEs","mapEs","isConnected","createSSE","url","eventName","close","es","EventSource","addEventListener","value","console","log","onmessage","ev","JSON","parse","e","error","onerror","setTimeout","initConnections","closeConnections","onMainData","onMapData","offMainData","offMapData","onConnectionStatus"],"sources":["C:/Users/Q/Desktop/项目脚手架/manager/vue/src/services/sseService.js"],"sourcesContent":["import { ref, onMounted, onUnmounted } from 'vue'\r\n\r\n// 创建事件总线\r\nconst eventBus = {\r\n  events: {},\r\n  on(event, callback) {\r\n    if (!this.events[event]) {\r\n      this.events[event] = []\r\n    }\r\n    this.events[event].push(callback)\r\n  },\r\n  emit(event, data) {\r\n    if (this.events[event]) {\r\n      this.events[event].forEach(callback => callback(data))\r\n    }\r\n  },\r\n  off(event, callback) {\r\n    if (this.events[event]) {\r\n      this.events[event] = this.events[event].filter(cb => cb !== callback)\r\n    }\r\n  }\r\n}\r\n\r\n// SSE连接配置\r\nconst backendUrl = 'http://8.152.103.136:9090'\r\nlet mainEs, mapEs\r\nlet isConnected = ref(false)\r\n\r\n// 创建SSE连接的通用方法\r\nconst createSSE = (url, eventName) => {\r\n  // 关闭已存在的连接\r\n  if (eventName === 'main' && mainEs) mainEs.close()\r\n  if (eventName === 'map' && mapEs) mapEs.close()\r\n\r\n  const es = new EventSource(url)\r\n  \r\n  // 连接成功处理\r\n  es.addEventListener('connected', () => {\r\n    isConnected.value = true\r\n    eventBus.emit('connectionStatus', true)\r\n    console.log(`${eventName} SSE连接成功`)\r\n  })\r\n  \r\n  // 接收消息处理\r\n  es.onmessage = (ev) => {\r\n    try {\r\n      const data = JSON.parse(ev.data)\r\n      eventBus.emit(eventName, data)\r\n    } catch (e) {\r\n      console.error(`${eventName} SSE数据解析失败:`, e)\r\n    }\r\n  }\r\n  \r\n  // 错误处理与重连\r\n  es.onerror = () => {\r\n    isConnected.value = false\r\n    eventBus.emit('connectionStatus', false)\r\n    console.error(`${eventName} SSE连接错误，尝试重连...`)\r\n    // 5秒后重连\r\n    setTimeout(() => createSSE(url, eventName), 5000)\r\n  }\r\n  \r\n  // 保存连接实例\r\n  if (eventName === 'main') mainEs = es\r\n  if (eventName === 'map') mapEs = es\r\n  \r\n  return es\r\n}\r\n\r\n// 初始化连接\r\nconst initConnections = () => {\r\n  createSSE(`${backendUrl}/sse/main`, 'main')      // 主数据端点\r\ncreateSSE(`${backendUrl}/sse/map`, 'map')      // 地图数据端点\r\n}\r\n\r\n// 关闭所有连接\r\nconst closeConnections = () => {\r\n  if (mainEs) mainEs.close()\r\n  if (mapEs) mapEs.close()\r\n  isConnected.value = false\r\n  eventBus.emit('connectionStatus', false)\r\n}\r\n\r\n// 导出服务\r\nexport default {\r\n  eventBus,\r\n  isConnected,\r\n  initConnections,\r\n  closeConnections,\r\n  onMainData: (callback) => eventBus.on('main', callback),\r\n  onMapData: (callback) => eventBus.on('map', callback),\r\n  offMainData: (callback) => eventBus.off('main', callback),\r\n  offMapData: (callback) => eventBus.off('map', callback),\r\n  onConnectionStatus: (callback) => eventBus.on('connectionStatus', callback)\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}