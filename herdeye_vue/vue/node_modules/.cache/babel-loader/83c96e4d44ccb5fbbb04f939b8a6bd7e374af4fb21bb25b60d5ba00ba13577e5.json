{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport axios from \"axios\";\nexport default {\n  name: 'Home',\n  data() {\n    return {\n      updateTime: new Date().toLocaleString(),\n      streams: {\n        drone: {\n          isStreaming: false,\n          src: '',\n          latestUrl: '',\n          isLoading: false,\n          intervals: {\n            refresh: null,\n            detection: null\n          }\n        },\n        ground: {\n          isStreaming: false,\n          src: '',\n          latestUrl: '',\n          isLoading: false,\n          intervals: {\n            refresh: null,\n            detection: null\n          }\n        }\n      }\n    };\n  },\n  methods: {\n    // 跳转GPS页面\n    navigateToGPS() {\n      this.$router.push('/GPS');\n    },\n    // 切换视频流状态\n    toggleStream(type) {\n      if (this.streams[type].isStreaming) {\n        this.stopStream(type);\n      } else {\n        this.startStream(type);\n      }\n    },\n    // 启动视频流\n    startStream(type) {\n      const stream = this.streams[type];\n      stream.isStreaming = true;\n      stream.isLoading = true; // 显示加载状态\n      stream.src = `http://localhost:5000/video_feed?type=${type}&t=${Date.now()}`;\n\n      // 清除旧定时器\n      Object.values(stream.intervals).forEach(interval => interval && clearInterval(interval));\n\n      // 模拟加载完成\n      setTimeout(() => {\n        stream.isLoading = false;\n      }, 1000);\n    },\n    // 停止视频流\n    async stopStream(type) {\n      const stream = this.streams[type];\n      stream.isStreaming = false;\n      stream.src = '';\n\n      // 清除检测轮询\n      clearInterval(stream.intervals.detection);\n\n      // 获取最新视频并启动刷新轮询\n      await this.fetchLatestVideo(type);\n      stream.intervals.refresh = setInterval(() => !stream.isStreaming && this.fetchLatestVideo(type), 5000);\n    },\n    // 获取最新录制视频\n    async fetchLatestVideo(type) {\n      try {\n        const res = await this.$request.get(`http://localhost:5000/latest_video?type=${type}`);\n        this.streams[type].latestUrl = res.url;\n      } catch (error) {\n        console.error(`${type === 'drone' ? '无人机' : '地面端'}视频获取失败`, error);\n      }\n    }\n  },\n  // 清理定时器\n  beforeUnmount() {\n    Object.values(this.streams).forEach(stream => {\n      Object.values(stream.intervals).forEach(interval => interval && clearInterval(interval));\n    });\n  },\n  // 初始化时间更新\n  created() {\n    setInterval(() => this.updateTime = new Date().toLocaleString(), 60000);\n  }\n};","map":{"version":3,"names":["axios","name","data","updateTime","Date","toLocaleString","streams","drone","isStreaming","src","latestUrl","isLoading","intervals","refresh","detection","ground","methods","navigateToGPS","$router","push","toggleStream","type","stopStream","startStream","stream","now","Object","values","forEach","interval","clearInterval","setTimeout","fetchLatestVideo","setInterval","res","$request","get","url","error","console","beforeUnmount","created"],"sources":["src/views/manager/video.vue"],"sourcesContent":["<template>\r\n  <div class=\"pasture-eye-page\">\r\n    <!-- 页面标题区域 -->\r\n    <header class=\"page-header\">\r\n      <h1 class=\"page-title\">牧瞳系统</h1>\r\n      <div class=\"page-meta\">\r\n        <span class=\"update-time\">上次更新：{{ updateTime }}</span>\r\n      </div>\r\n    </header>\r\n\r\n    <!-- 检测功能模块 -->\r\n    <el-card class=\"detection-card\">\r\n      <!-- 视频流容器 - 并排显示 -->\r\n      <div class=\"videos-container\">\r\n        <!-- 无人机视频流 -->\r\n        <div class=\"video-module\">\r\n          <div class=\"detection-header\">\r\n            <span class=\"video-title\">无人机视频：牲畜数量实时统计</span>\r\n            <el-button\r\n              :type=\"streams.drone.isStreaming ? 'danger' : 'success'\"\r\n              @click=\"toggleStream('drone')\"\r\n              class=\"control-button\"\r\n            >\r\n              {{ streams.drone.isStreaming ? '关闭视频' : '开启视频' }}\r\n            </el-button>\r\n          </div>\r\n\r\n          <div class=\"video-container\">\r\n            <img\r\n              :src=\"streams.drone.src\"\r\n              class=\"video-stream\"\r\n              v-show=\"streams.drone.isStreaming\"\r\n              alt=\"无人机视频流\"\r\n              :class=\"{ 'video-loading': streams.drone.isLoading }\"\r\n            />\r\n            <div v-show=\"!streams.drone.isStreaming && streams.drone.latestUrl\" class=\"video-links\">\r\n              <h3>无人机录制视频</h3>\r\n              <el-link :href=\"streams.drone.latestUrl\" target=\"_blank\" type=\"primary\" class=\"download-link\">\r\n                下载最新视频 <i class=\"el-icon-download\"></i>\r\n              </el-link>\r\n            </div>\r\n            <div v-show=\"!streams.drone.isStreaming && !streams.drone.latestUrl\" class=\"video-placeholder\">\r\n              <i class=\"el-icon-video-camera\"></i>\r\n              <p>点击开启无人机视频流</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 地面端视频流 -->\r\n        <div class=\"video-module\">\r\n          <div class=\"detection-header\">\r\n            <span class=\"video-title\">地面端视频：智能车画面实时跟踪</span>\r\n            <el-button\r\n              :type=\"streams.ground.isStreaming ? 'danger' : 'success'\"\r\n              @click=\"toggleStream('ground')\"\r\n              class=\"control-button\"\r\n            >\r\n              {{ streams.ground.isStreaming ? '关闭视频' : '开启视频' }}\r\n            </el-button>\r\n          </div>\r\n\r\n          <div class=\"video-container\">\r\n            <img\r\n              :src=\"streams.ground.src\"\r\n              class=\"video-stream\"\r\n              v-show=\"streams.ground.isStreaming\"\r\n              alt=\"地面端视频流\"\r\n              :class=\"{ 'video-loading': streams.ground.isLoading }\"\r\n            />\r\n            <div v-show=\"!streams.ground.isStreaming && streams.ground.latestUrl\" class=\"video-links\">\r\n              <h3>地面端录制视频</h3>\r\n              <el-link :href=\"streams.ground.latestUrl\" target=\"_blank\" type=\"primary\" class=\"download-link\">\r\n                下载最新视频 <i class=\"el-icon-download\"></i>\r\n              </el-link>\r\n            </div>\r\n            <div v-show=\"!streams.ground.isStreaming && !streams.ground.latestUrl\" class=\"video-placeholder\">\r\n              <i class=\"el-icon-video-camera\"></i>\r\n              <p>点击开启地面端视频流</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: 'Home',\r\n  data() {\r\n    return {\r\n      updateTime: new Date().toLocaleString(),\r\n      streams: { \r\n        drone: {\r\n          isStreaming: false,\r\n          src: '',\r\n          latestUrl: '',\r\n          isLoading: false,\r\n          intervals: { refresh: null, detection: null }\r\n        },\r\n        ground: {\r\n          isStreaming: false,\r\n          src: '',\r\n          latestUrl: '',\r\n          isLoading: false,\r\n          intervals: { refresh: null, detection: null }\r\n        }\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    // 跳转GPS页面\r\n    navigateToGPS() {\r\n      this.$router.push('/GPS');\r\n    },\r\n\r\n    // 切换视频流状态\r\n    toggleStream(type) {\r\n      if (this.streams[type].isStreaming) {\r\n        this.stopStream(type);\r\n      } else {\r\n        this.startStream(type);\r\n      }\r\n    },\r\n\r\n    // 启动视频流\r\n    startStream(type) {\r\n      const stream = this.streams[type];\r\n      stream.isStreaming = true;\r\n      stream.isLoading = true; // 显示加载状态\r\n      stream.src = `http://localhost:5000/video_feed?type=${type}&t=${Date.now()}`;\r\n      \r\n      // 清除旧定时器\r\n      Object.values(stream.intervals).forEach(interval => interval && clearInterval(interval));\r\n      \r\n      // 模拟加载完成\r\n      setTimeout(() => {\r\n        stream.isLoading = false;\r\n      }, 1000);\r\n    },\r\n\r\n    // 停止视频流\r\n    async stopStream(type) {\r\n      const stream = this.streams[type];\r\n      stream.isStreaming = false;\r\n      stream.src = '';\r\n      \r\n      // 清除检测轮询\r\n      clearInterval(stream.intervals.detection);\r\n      \r\n      // 获取最新视频并启动刷新轮询\r\n      await this.fetchLatestVideo(type);\r\n      stream.intervals.refresh = setInterval(() => !stream.isStreaming && this.fetchLatestVideo(type), 5000);\r\n    },\r\n\r\n    // 获取最新录制视频\r\n    async fetchLatestVideo(type) {\r\n      try {\r\n        const res = await this.$request.get(`http://localhost:5000/latest_video?type=${type}`);\r\n        this.streams[type].latestUrl = res.url;\r\n      } catch (error) {\r\n        console.error(`${type === 'drone' ? '无人机' : '地面端'}视频获取失败`, error);\r\n      }\r\n    }\r\n  },\r\n  // 清理定时器\r\n  beforeUnmount() {\r\n    Object.values(this.streams).forEach(stream => {\r\n      Object.values(stream.intervals).forEach(interval => interval && clearInterval(interval));\r\n    });\r\n  },\r\n  // 初始化时间更新\r\n  created() {\r\n    setInterval(() => this.updateTime = new Date().toLocaleString(), 60000);\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.pasture-eye-page {\r\n  padding: 24px;\r\n  background-color: #f5f7fa;\r\n  min-height: 100vh;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.page-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 24px;\r\n  padding-bottom: 16px;\r\n  border-bottom: 1px solid #e5e6eb;\r\n}\r\n\r\n.page-title {\r\n  margin: 0;\r\n  font-size: 22px;\r\n  font-weight: 600;\r\n  color: #1d2129;\r\n}\r\n\r\n.page-meta {\r\n  color: #86909c;\r\n  font-size: 14px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.page-meta .update-time::before {\r\n  content: \"\";\r\n  display: inline-block;\r\n  width: 16px;\r\n  height: 16px;\r\n  background: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%2386909c' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Ccircle cx='12' cy='12' r='10'%3E%3C/circle%3E%3Cpolyline points='12 6 12 12 16 14'%3E%3C/polyline%3E%3C/svg%3E\") no-repeat center;\r\n  margin-right: 6px;\r\n  vertical-align: middle;\r\n}\r\n\r\n.detection-card {\r\n  padding: 24px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\r\n  border: none;\r\n  background-color: #fff;\r\n}\r\n\r\n.videos-container {\r\n  display: flex;\r\n  gap: 24px;\r\n  width: 100%;\r\n}\r\n\r\n.video-module {\r\n  flex: 1;\r\n  margin-bottom: 0;\r\n  padding-bottom: 0;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.detection-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 16px;\r\n  padding-bottom: 12px;\r\n  border-bottom: 1px solid #f2f3f5;\r\n}\r\n\r\n.video-title {\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  color: #1d2129;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.control-button {\r\n  padding: 6px 16px;\r\n  border-radius: 4px;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.control-button:hover {\r\n  transform: translateY(-1px);\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.video-container {\r\n  border: 1px solid #e5e6eb;\r\n  border-radius: 6px;\r\n  padding: 16px;\r\n  background-color: #fafafa;\r\n  margin-bottom: 0;\r\n  min-height: 450px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: relative;\r\n  transition: border-color 0.3s ease;\r\n}\r\n\r\n.video-container:hover {\r\n  border-color: #c9cdD4;\r\n}\r\n\r\n.video-stream {\r\n  max-width: 100%;\r\n  height: auto;\r\n  min-height: 400px;\r\n  object-fit: contain;\r\n  border-radius: 4px;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.video-loading {\r\n  animation: pulse 1.5s infinite;\r\n}\r\n\r\n@keyframes pulse {\r\n  0% {\r\n    opacity: 1;\r\n  }\r\n  50% {\r\n    opacity: 0.7;\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n.video-links {\r\n  text-align: center;\r\n  padding: 30px 20px;\r\n  color: #4e5969;\r\n}\r\n\r\n.video-links h3 {\r\n  margin-bottom: 16px;\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  color: #1d2129;\r\n}\r\n\r\n.download-link {\r\n  font-size: 14px;\r\n  padding: 6px 12px;\r\n  border-radius: 4px;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.download-link:hover {\r\n  background-color: #f0f7ff;\r\n}\r\n\r\n.video-placeholder {\r\n  text-align: center;\r\n  color: #86909c;\r\n  padding: 30px 20px;\r\n}\r\n\r\n.video-placeholder i {\r\n  font-size: 48px;\r\n  margin-bottom: 16px;\r\n  color: #c9cdD4;\r\n  transition: color 0.3s ease;\r\n}\r\n\r\n.video-module:hover .video-placeholder i {\r\n  color: #86909c;\r\n}\r\n\r\n.video-placeholder p {\r\n  margin: 0;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 响应式调整 */\r\n@media (max-width: 1024px) {\r\n  .videos-container {\r\n    gap: 16px;\r\n  }\r\n  \r\n  .video-container {\r\n    min-height: 380px;\r\n  }\r\n  \r\n  .video-stream {\r\n    min-height: 340px;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .pasture-eye-page {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .page-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 12px;\r\n    margin-bottom: 16px;\r\n    padding-bottom: 12px;\r\n  }\r\n  \r\n  .videos-container {\r\n    flex-direction: column;\r\n    gap: 24px;\r\n  }\r\n  \r\n  .video-module {\r\n    width: 100%;\r\n  }\r\n  \r\n  .detection-card {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .detection-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 12px;\r\n    margin-bottom: 12px;\r\n    padding-bottom: 8px;\r\n  }\r\n  \r\n  .video-title {\r\n    white-space: normal;\r\n    line-height: 1.5;\r\n  }\r\n  \r\n  .video-container {\r\n    min-height: 280px;\r\n    padding: 12px;\r\n  }\r\n  \r\n  .video-stream {\r\n    min-height: 240px;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .page-title {\r\n    font-size: 18px;\r\n  }\r\n  \r\n  .video-title {\r\n    font-size: 14px;\r\n  }\r\n  \r\n  .control-button {\r\n    width: 100%;\r\n    margin-left: 0 !important;\r\n  }\r\n}\r\n</style>"],"mappings":";;;AAuFA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,UAAA,MAAAC,IAAA,GAAAC,cAAA;MACAC,OAAA;QACAC,KAAA;UACAC,WAAA;UACAC,GAAA;UACAC,SAAA;UACAC,SAAA;UACAC,SAAA;YAAAC,OAAA;YAAAC,SAAA;UAAA;QACA;QACAC,MAAA;UACAP,WAAA;UACAC,GAAA;UACAC,SAAA;UACAC,SAAA;UACAC,SAAA;YAAAC,OAAA;YAAAC,SAAA;UAAA;QACA;MACA;IACA;EACA;EACAE,OAAA;IACA;IACAC,cAAA;MACA,KAAAC,OAAA,CAAAC,IAAA;IACA;IAEA;IACAC,aAAAC,IAAA;MACA,SAAAf,OAAA,CAAAe,IAAA,EAAAb,WAAA;QACA,KAAAc,UAAA,CAAAD,IAAA;MACA;QACA,KAAAE,WAAA,CAAAF,IAAA;MACA;IACA;IAEA;IACAE,YAAAF,IAAA;MACA,MAAAG,MAAA,QAAAlB,OAAA,CAAAe,IAAA;MACAG,MAAA,CAAAhB,WAAA;MACAgB,MAAA,CAAAb,SAAA;MACAa,MAAA,CAAAf,GAAA,4CAAAY,IAAA,MAAAjB,IAAA,CAAAqB,GAAA;;MAEA;MACAC,MAAA,CAAAC,MAAA,CAAAH,MAAA,CAAAZ,SAAA,EAAAgB,OAAA,CAAAC,QAAA,IAAAA,QAAA,IAAAC,aAAA,CAAAD,QAAA;;MAEA;MACAE,UAAA;QACAP,MAAA,CAAAb,SAAA;MACA;IACA;IAEA;IACA,MAAAW,WAAAD,IAAA;MACA,MAAAG,MAAA,QAAAlB,OAAA,CAAAe,IAAA;MACAG,MAAA,CAAAhB,WAAA;MACAgB,MAAA,CAAAf,GAAA;;MAEA;MACAqB,aAAA,CAAAN,MAAA,CAAAZ,SAAA,CAAAE,SAAA;;MAEA;MACA,WAAAkB,gBAAA,CAAAX,IAAA;MACAG,MAAA,CAAAZ,SAAA,CAAAC,OAAA,GAAAoB,WAAA,QAAAT,MAAA,CAAAhB,WAAA,SAAAwB,gBAAA,CAAAX,IAAA;IACA;IAEA;IACA,MAAAW,iBAAAX,IAAA;MACA;QACA,MAAAa,GAAA,cAAAC,QAAA,CAAAC,GAAA,4CAAAf,IAAA;QACA,KAAAf,OAAA,CAAAe,IAAA,EAAAX,SAAA,GAAAwB,GAAA,CAAAG,GAAA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,IAAAjB,IAAA,sCAAAiB,KAAA;MACA;IACA;EACA;EACA;EACAE,cAAA;IACAd,MAAA,CAAAC,MAAA,MAAArB,OAAA,EAAAsB,OAAA,CAAAJ,MAAA;MACAE,MAAA,CAAAC,MAAA,CAAAH,MAAA,CAAAZ,SAAA,EAAAgB,OAAA,CAAAC,QAAA,IAAAA,QAAA,IAAAC,aAAA,CAAAD,QAAA;IACA;EACA;EACA;EACAY,QAAA;IACAR,WAAA,YAAA9B,UAAA,OAAAC,IAAA,GAAAC,cAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}