{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nexport default {\n  name: \"SensorDataHis\",\n  data() {\n    return {\n      tableData: [],\n      // 所有的数据\n      pageNum: 1,\n      // 当前的页码\n      pageSize: 10,\n      // 每页显示的个数\n      total: 0,\n      title: null,\n      fromVisible: false,\n      form: {},\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      rules: {\n        title: [{\n          required: true,\n          message: '请输入标题',\n          trigger: 'blur'\n        }],\n        content: [{\n          required: true,\n          message: '请输入内容',\n          trigger: 'blur'\n        }]\n      },\n      ids: [],\n      resultVisible: false,\n      resultList: []\n    };\n  },\n  created() {\n    this.load(1);\n  },\n  methods: {\n    handleSelectionChange(rows) {\n      // 当前选中的所有的行数据\n      this.ids = rows.map(v => v.id); //  [1,2]\n    },\n    delBatch() {\n      // 批量删除\n      if (!this.ids.length) {\n        this.$message.warning('请选择数据');\n        return;\n      }\n      this.$confirm('您确定批量删除这些数据吗？', '确认删除', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/rtsd/delete/batch', {\n          data: this.ids\n        }).then(res => {\n          if (res.code === '200') {\n            // 表示操作成功\n            this.$message.success('操作成功');\n            this.load(1);\n          } else {\n            this.$message.error(res.msg); // 弹出错误的信息\n          }\n        });\n      }).catch(() => {});\n    },\n    load(pageNum) {\n      // 分页查询\n      if (pageNum) this.pageNum = pageNum;\n      this.$request.get('/rtsd/selectPage', {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          title: this.title\n        }\n      }).then(res => {\n        this.tableData = res.data?.list;\n        this.total = res.data?.total;\n      });\n    },\n    reset() {\n      this.title = null;\n      this.load(1);\n    },\n    handleCurrentChange(pageNum) {\n      this.load(pageNum);\n    },\n    formatTime(row, column) {\n      // 假设时间格式化方法，根据实际数据格式调整\n      if (!row.time) return '';\n      return new Date(row.time).toLocaleString();\n    }\n  }\n};","map":{"version":3,"names":["name","data","tableData","pageNum","pageSize","total","title","fromVisible","form","user","JSON","parse","localStorage","getItem","rules","required","message","trigger","content","ids","resultVisible","resultList","created","load","methods","handleSelectionChange","rows","map","v","id","delBatch","length","$message","warning","$confirm","type","then","response","$request","delete","res","code","success","error","msg","catch","get","params","list","reset","handleCurrentChange","formatTime","row","column","time","Date","toLocaleString"],"sources":["src/views/manager/SenDataHis.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- 搜索区域 -->\r\n    <div class=\"search\">\r\n      <el-input placeholder=\"请输入标题查询\" style=\"width: 200px\" v-model=\"title\"></el-input>\r\n      <el-button type=\"info\" plain style=\"margin-left: 10px\" @click=\"load(1)\">查询</el-button>\r\n      <el-button type=\"warning\" plain style=\"margin-left: 10px\" @click=\"reset\">重置</el-button>\r\n      <el-button type=\"danger\" plain @click=\"delBatch\">批量删除</el-button>\r\n    </div>\r\n\r\n    <!-- 表格区域 -->\r\n    <div class=\"table\">\r\n      <el-table\r\n          :data=\"tableData\"\r\n          stripe\r\n          @selection-change=\"handleSelectionChange\"\r\n          style=\"width: 100%\"\r\n          class=\"optimized-table\"\r\n          :default-sort = \"{prop: 'time', order: 'descending'}\"\r\n      >\r\n        <el-table-column type=\"selection\" width=\"55\" align=\"center\"></el-table-column>\r\n        <el-table-column\r\n            prop=\"id\"\r\n            label=\"序号\"\r\n            width=\"80\"\r\n            align=\"center\"\r\n            sortable\r\n        ></el-table-column>\r\n\r\n        <el-table-column\r\n            prop=\"time\"\r\n            label=\"上报时间\"\r\n            min-width=\"180\"\r\n            :formatter=\"formatTime\"\r\n        ></el-table-column>\r\n\r\n        <!-- 数值列统一右对齐并添加单位 -->\r\n        <el-table-column prop=\"t\" label=\"温度(℃)\" min-width=\"110\" align=\"right\">\r\n          <template slot-scope=\"{row}\">\r\n            {{ Number(row.t).toFixed(1) }}\r\n          </template>\r\n        </el-table-column>\r\n\r\n        <el-table-column prop=\"h\" label=\"湿度(%)\" min-width=\"110\" align=\"right\">\r\n          <template slot-scope=\"{row}\">\r\n            {{ Number(row.h).toFixed(1) }}\r\n          </template>\r\n        </el-table-column>\r\n\r\n        <el-table-column prop=\"p\" label=\"压强(hPa)\" min-width=\"120\" align=\"right\">\r\n          <template slot-scope=\"{row}\">\r\n            {{ Math.round(row.p) }}\r\n          </template>\r\n        </el-table-column>\r\n\r\n        <el-table-column prop=\"e\" label=\"编码器\" min-width=\"100\" align=\"center\"></el-table-column>\r\n\r\n        <el-table-column prop=\"co\" label=\"CO(ppm)\" min-width=\"120\" align=\"right\">\r\n          <template slot-scope=\"{row}\">\r\n            {{ Number(row.co).toFixed(2) }}\r\n          </template>\r\n        </el-table-column>\r\n\r\n        <el-table-column prop=\"ch4\" label=\"CH₄(ppm)\" min-width=\"130\" align=\"right\">\r\n          <template slot-scope=\"{row}\">\r\n            {{ Number(row.ch4).toFixed(2) }}\r\n          </template>\r\n        </el-table-column>\r\n\r\n        <el-table-column prop=\"etOH\" label=\"C₂H₅OH(ppm)\" min-width=\"150\" align=\"right\">\r\n          <template slot-scope=\"{row}\">\r\n            {{ Number(row.etOH).toFixed(2) }}\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n\r\n      <!-- 分页区域 -->\r\n      <div class=\"pagination\">\r\n        <el-pagination\r\n            background\r\n            @current-change=\"handleCurrentChange\"\r\n            :current-page=\"pageNum\"\r\n            :page-sizes=\"[5, 10, 20]\"\r\n            :page-size=\"pageSize\"\r\n            layout=\"total, prev, pager, next\"\r\n            :total=\"total\">\r\n        </el-pagination>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"SensorDataHis\",\r\n  data() {\r\n    return {\r\n      tableData: [],  // 所有的数据\r\n      pageNum: 1,   // 当前的页码\r\n      pageSize: 10,  // 每页显示的个数\r\n      total: 0,\r\n      title: null,\r\n      fromVisible: false,\r\n      form: {},\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      rules: {\r\n        title: [\r\n          {required: true, message: '请输入标题', trigger: 'blur'},\r\n        ],\r\n        content: [\r\n          {required: true, message: '请输入内容', trigger: 'blur'},\r\n        ]\r\n      },\r\n      ids: [],\r\n      resultVisible:false,\r\n      resultList:[],\r\n    }\r\n  },\r\n  created() {\r\n    this.load(1)\r\n  },\r\n  methods: {\r\n    handleSelectionChange(rows) {   // 当前选中的所有的行数据\r\n      this.ids = rows.map(v => v.id)   //  [1,2]\r\n    },\r\n    delBatch() {   // 批量删除\r\n      if (!this.ids.length) {\r\n        this.$message.warning('请选择数据')\r\n        return\r\n      }\r\n      this.$confirm('您确定批量删除这些数据吗？', '确认删除', {type: \"warning\"}).then(response => {\r\n        this.$request.delete('/rtsd/delete/batch', {data: this.ids}).then(res => {\r\n          if (res.code === '200') {   // 表示操作成功\r\n            this.$message.success('操作成功')\r\n            this.load(1)\r\n          } else {\r\n            this.$message.error(res.msg)  // 弹出错误的信息\r\n          }\r\n        })\r\n      }).catch(() => {\r\n      })\r\n    },\r\n    load(pageNum) {  // 分页查询\r\n      if (pageNum) this.pageNum = pageNum\r\n      this.$request.get('/rtsd/selectPage', {\r\n        params: {\r\n          pageNum: this.pageNum,\r\n          pageSize: this.pageSize,\r\n          title: this.title,\r\n        }\r\n      }).then(res => {\r\n        this.tableData = res.data?.list\r\n        this.total = res.data?.total\r\n      })\r\n    },\r\n    reset() {\r\n      this.title = null\r\n      this.load(1)\r\n    },\r\n    handleCurrentChange(pageNum) {\r\n      this.load(pageNum)\r\n    },\r\n    formatTime(row, column) {\r\n      // 假设时间格式化方法，根据实际数据格式调整\r\n      if (!row.time) return ''\r\n      return new Date(row.time).toLocaleString()\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* 容器样式 */\r\n.container {\r\n  padding: 20px;\r\n}\r\n\r\n/* 搜索区域样式 - 关键：添加底部外边距拉开与表格的距离 */\r\n.search {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 20px; /* 按钮与表格的间距 */\r\n  flex-wrap: wrap; /* 支持换行 */\r\n  gap: 10px; /* 按钮之间的间距 */\r\n}\r\n\r\n/* 表格区域样式 */\r\n.table {\r\n  width: 100%;\r\n}\r\n\r\n.optimized-table {\r\n  font-size: 14px;\r\n  --el-table-header-bg-color: #f8f9fa;\r\n  --el-table-row-hover-bg-color: #f8fafc;\r\n}\r\n\r\n.optimized-table /deep/ .el-table__header th {\r\n  font-weight: 600;\r\n  color: #2c3e50;\r\n}\r\n\r\n.optimized-table /deep/ .el-table__cell {\r\n  padding: 10px 0;\r\n}\r\n\r\n.optimized-table /deep/ .numeric-cell {\r\n  font-family: 'Roboto Mono', monospace;\r\n}\r\n\r\n/* 分页区域样式 */\r\n.pagination {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 20px;\r\n}\r\n\r\n/* 响应式调整 */\r\n@media (max-width: 768px) {\r\n  .table {\r\n    overflow-x: auto;\r\n  }\r\n\r\n  .optimized-table {\r\n    min-width: 800px;\r\n  }\r\n\r\n  .search {\r\n    margin-bottom: 15px; /* 移动端减小间距 */\r\n  }\r\n\r\n  .search .el-input {\r\n    width: 100% !important;\r\n  }\r\n}\r\n\r\n.coordinate-detail div {\r\n  font-family: monospace;\r\n  font-size: 13px;\r\n}\r\n\r\n.coordinate-range div {\r\n  font-family: monospace;\r\n  font-size: 13px;\r\n  color: #606266;\r\n}\r\n</style>"],"mappings":";;AA6FA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MAAA;MACAC,OAAA;MAAA;MACAC,QAAA;MAAA;MACAC,KAAA;MACAC,KAAA;MACAC,WAAA;MACAC,IAAA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,KAAA;QACAR,KAAA,GACA;UAAAS,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAC,OAAA,GACA;UAAAH,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;MACAE,GAAA;MACAC,aAAA;MACAC,UAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,IAAA;EACA;EACAC,OAAA;IACAC,sBAAAC,IAAA;MAAA;MACA,KAAAP,GAAA,GAAAO,IAAA,CAAAC,GAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAC,EAAA;IACA;IACAC,SAAA;MAAA;MACA,UAAAX,GAAA,CAAAY,MAAA;QACA,KAAAC,QAAA,CAAAC,OAAA;QACA;MACA;MACA,KAAAC,QAAA;QAAAC,IAAA;MAAA,GAAAC,IAAA,CAAAC,QAAA;QACA,KAAAC,QAAA,CAAAC,MAAA;UAAAtC,IAAA,OAAAkB;QAAA,GAAAiB,IAAA,CAAAI,GAAA;UACA,IAAAA,GAAA,CAAAC,IAAA;YAAA;YACA,KAAAT,QAAA,CAAAU,OAAA;YACA,KAAAnB,IAAA;UACA;YACA,KAAAS,QAAA,CAAAW,KAAA,CAAAH,GAAA,CAAAI,GAAA;UACA;QACA;MACA,GAAAC,KAAA,QACA;IACA;IACAtB,KAAApB,OAAA;MAAA;MACA,IAAAA,OAAA,OAAAA,OAAA,GAAAA,OAAA;MACA,KAAAmC,QAAA,CAAAQ,GAAA;QACAC,MAAA;UACA5C,OAAA,OAAAA,OAAA;UACAC,QAAA,OAAAA,QAAA;UACAE,KAAA,OAAAA;QACA;MACA,GAAA8B,IAAA,CAAAI,GAAA;QACA,KAAAtC,SAAA,GAAAsC,GAAA,CAAAvC,IAAA,EAAA+C,IAAA;QACA,KAAA3C,KAAA,GAAAmC,GAAA,CAAAvC,IAAA,EAAAI,KAAA;MACA;IACA;IACA4C,MAAA;MACA,KAAA3C,KAAA;MACA,KAAAiB,IAAA;IACA;IACA2B,oBAAA/C,OAAA;MACA,KAAAoB,IAAA,CAAApB,OAAA;IACA;IACAgD,WAAAC,GAAA,EAAAC,MAAA;MACA;MACA,KAAAD,GAAA,CAAAE,IAAA;MACA,WAAAC,IAAA,CAAAH,GAAA,CAAAE,IAAA,EAAAE,cAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}