{"ast":null,"code":"require(\"core-js/modules/es.iterator.constructor.js\");\nrequire(\"core-js/modules/es.iterator.find.js\");\nconst createSSE = (url, onMsg, onConn) => {\n  const es = new EventSource(url);\n  es.addEventListener('connected', onConn);\n  es.onmessage = onMsg;\n  es.onerror = () => setTimeout(() => createSSE(url, onMsg, onConn), 5000);\n  return es;\n};\n\n// 主数据SSE连接\nconst connectMainSSE = () => {\n  mainEs = createSSE(`${backendUrl}/sse/subscribe`, ev => {\n    try {\n      const data = JSON.parse(ev.data);\n      temp.value = data.tem || data.T || temp.value;\n      hum.value = data.hum || data.H || hum.value;\n      water.value = {\n        status: data.waterStatus || 0,\n        value: data.Wal || data.waterlevel || 0\n      };\n      weight.value = Math.max(0, Math.min(100, parseFloat(data.weight) || 0));\n\n      // 更新设备状态\n      devices.value.find(d => d.name === '水泵').status = data.pump || 0;\n      devices.value.find(d => d.name === '报警电机').status = data.motor || 0;\n      devices.value.find(d => d.name === '灯光').status = data.light || 0;\n      devices.value.find(d => d.name === '阀门').status = data.door || 0;\n      devices.value.find(d => d.name === '加热').status = data.heat || 0;\n      devices.value.find(d => d.name === '风机').status = data.fan || 0;\n\n      // 更新历史数据\n      const timeStr = new Date().toLocaleTimeString();\n      updateHistory(tempHistory, temp.value, timeStr);\n      updateHistory(humHistory, hum.value, timeStr);\n      lastUpdate.value = new Date().toLocaleString();\n      currDate.value = new Date().toLocaleDateString();\n      renderCharts();\n      mainConn.value = true;\n    } catch (e) {\n      mainConn.value = false;\n      console.error('解析主SSE失败:', e);\n    }\n  }, () => mainConn.value = true);\n};\n\n// 地图SSE连接\nconst connectMapSSE = () => {\n  mapEs = createSSE(`${backendUrl}/sse/subscribe`, ev => {\n    try {\n      const data = JSON.parse(ev.data);\n      if (data.lng !== undefined && data.lat !== undefined) {\n        const lng = parseFloat(data.lng),\n          lat = parseFloat(data.lat);\n        if (!isNaN(lng) && !isNaN(lat) && lng >= -180 && lng <= 180 && lat >= -90 && lat <= 90) {\n          lnglat.value = `${lng.toFixed(6)},${lat.toFixed(6)}`;\n          marker?.setPosition([lng + 0.01, lat - 0.001]);\n          map?.panTo([lng + 0.01, lat - 0.001], {\n            duration: 300\n          });\n        }\n      }\n      if (data.cogt !== undefined) {\n        const angle = parseFloat(data.cogt);\n        if (!isNaN(angle)) {\n          course.value = `${angle.toFixed(1)}°`;\n          marker?.setRotation((angle % 360 + 360) % 360);\n        }\n      }\n      mapConn.value = true;\n    } catch (e) {\n      mapConn.value = false;\n      console.error('解析地图SSE失败:', e);\n    }\n  }, () => mapConn.value = true);\n};","map":{"version":3,"names":["createSSE","url","onMsg","onConn","es","EventSource","addEventListener","onmessage","onerror","setTimeout","connectMainSSE","mainEs","backendUrl","ev","data","JSON","parse","temp","value","tem","T","hum","H","water","status","waterStatus","Wal","waterlevel","weight","Math","max","min","parseFloat","devices","find","d","name","pump","motor","light","door","heat","fan","timeStr","Date","toLocaleTimeString","updateHistory","tempHistory","humHistory","lastUpdate","toLocaleString","currDate","toLocaleDateString","renderCharts","mainConn","e","console","error","connectMapSSE","mapEs","lng","undefined","lat","isNaN","lnglat","toFixed","marker","setPosition","map","panTo","duration","cogt","angle","course","setRotation","mapConn"],"sources":["src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <router-view/>\n  </div>\n</template>\n<script>\nconst createSSE = (url, onMsg, onConn) => {\n  const es = new EventSource(url)\n  es.addEventListener('connected', onConn)\n  es.onmessage = onMsg\n  es.onerror = () => setTimeout(() => createSSE(url, onMsg, onConn), 5000)\n  return es\n}\n\n// 主数据SSE连接\nconst connectMainSSE = () => {\n  mainEs = createSSE(`${backendUrl}/sse/subscribe`, (ev) => {\n    try {\n      const data = JSON.parse(ev.data)\n      temp.value = data.tem || data.T || temp.value\n      hum.value = data.hum || data.H || hum.value\n      \n      water.value = {\n        status: data.waterStatus || 0,\n        value: data.Wal || data.waterlevel || 0\n      }\n      \n      weight.value = Math.max(0, Math.min(100, parseFloat(data.weight) || 0))\n\n      // 更新设备状态\n      devices.value.find(d => d.name === '水泵').status = data.pump || 0\n      devices.value.find(d => d.name === '报警电机').status = data.motor || 0\n      devices.value.find(d => d.name === '灯光').status = data.light || 0\n      devices.value.find(d => d.name === '阀门').status = data.door || 0\n      devices.value.find(d => d.name === '加热').status = data.heat || 0\n      devices.value.find(d => d.name === '风机').status = data.fan || 0\n      \n      // 更新历史数据\n      const timeStr = new Date().toLocaleTimeString()\n      updateHistory(tempHistory, temp.value, timeStr)\n      updateHistory(humHistory, hum.value, timeStr)\n      \n      lastUpdate.value = new Date().toLocaleString()\n      currDate.value = new Date().toLocaleDateString()\n      renderCharts()\n      mainConn.value = true\n    } catch (e) {\n      mainConn.value = false\n      console.error('解析主SSE失败:', e)\n    }\n  }, () => mainConn.value = true)\n}\n\n// 地图SSE连接\nconst connectMapSSE = () => {\n  mapEs = createSSE(`${backendUrl}/sse/subscribe`, (ev) => {\n    try {\n      const data = JSON.parse(ev.data)\n      if (data.lng !== undefined && data.lat !== undefined) {\n        const lng = parseFloat(data.lng), lat = parseFloat(data.lat)\n        if (!isNaN(lng) && !isNaN(lat) && lng >= -180 && lng <= 180 && lat >= -90 && lat <= 90) {\n          lnglat.value = `${lng.toFixed(6)},${lat.toFixed(6)}`\n          marker?.setPosition([lng + 0.01, lat - 0.001])\n          map?.panTo([lng + 0.01, lat - 0.001], { duration: 300 })\n        }\n      }\n      if (data.cogt !== undefined) {\n        const angle = parseFloat(data.cogt)\n        if (!isNaN(angle)) {\n          course.value = `${angle.toFixed(1)}°`\n          marker?.setRotation(((angle % 360) + 360) % 360)\n        }\n      }\n      mapConn.value = true\n    } catch (e) {\n      mapConn.value = false\n      console.error('解析地图SSE失败:', e)\n    }\n  }, () => mapConn.value = true)\n}\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}